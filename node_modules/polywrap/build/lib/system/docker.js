"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.correctBuildContextPathsFromCompose = exports.generateDockerImageName = exports.generateDockerfile = exports.createBuildImage = exports.copyArtifactsFromBuildImage = exports.isDockerBuildxInstalled = exports.getDockerFileLock = exports.isDockerInstalled = void 0;
var _1 = require("./");
var __1 = require("../");
var os_js_1 = require("@polywrap/os-js");
var gluegun_1 = require("gluegun");
var mustache_1 = __importDefault(require("mustache"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
function isDockerInstalled() {
    return !!gluegun_1.system.which("docker");
}
exports.isDockerInstalled = isDockerInstalled;
function getDockerFileLock() {
    return new _1.FileLock(__dirname + "/DOCKER_LOCK", gluegun_1.print.error);
}
exports.getDockerFileLock = getDockerFileLock;
function isDockerBuildxInstalled() {
    return __awaiter(this, void 0, void 0, function () {
        var version;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, _1.runCommand("docker buildx version")];
                case 1:
                    version = (_a.sent()).stdout;
                    return [2 /*return*/, version.startsWith("github.com/docker/buildx")];
            }
        });
    });
}
exports.isDockerBuildxInstalled = isDockerBuildxInstalled;
function copyArtifactsFromBuildImage(outputDir, buildArtifact, imageName, removeBuilder, removeImage, useBuildx, quiet) {
    if (removeBuilder === void 0) { removeBuilder = false; }
    if (removeImage === void 0) { removeImage = false; }
    if (useBuildx === void 0) { useBuildx = false; }
    if (quiet === void 0) { quiet = true; }
    return __awaiter(this, void 0, void 0, function () {
        var run, args;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () { return __awaiter(_this, void 0, void 0, function () {
                        var _a, containerLsOutput, projectLsOutput, buildLsOutput;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    // Make sure the interactive terminal name is available
                                    _a = useBuildx;
                                    if (!_a) 
                                    // Make sure the interactive terminal name is available
                                    return [3 /*break*/, 2];
                                    return [4 /*yield*/, isDockerBuildxInstalled()];
                                case 1:
                                    _a = (
                                    // Make sure the interactive terminal name is available
                                    useBuildx = _b.sent());
                                    _b.label = 2;
                                case 2:
                                    // Make sure the interactive terminal name is available
                                    _a;
                                    return [4 /*yield*/, _1.runCommand("docker container ls -a", quiet)];
                                case 3:
                                    containerLsOutput = (_b.sent()).stdout;
                                    if (!(containerLsOutput.indexOf("root-" + imageName) > -1)) return [3 /*break*/, 5];
                                    return [4 /*yield*/, _1.runCommand("docker rm -f root-" + imageName, quiet)];
                                case 4:
                                    _b.sent();
                                    _b.label = 5;
                                case 5: 
                                // Create a new interactive terminal
                                return [4 /*yield*/, _1.runCommand("docker create -ti --name root-" + imageName + " " + imageName, quiet)];
                                case 6:
                                    // Create a new interactive terminal
                                    _b.sent();
                                    return [4 /*yield*/, _1.runCommand("docker run --rm " + imageName + " /bin/bash -c \"ls /project\"", quiet).catch(function () { return ({ stdout: "" }); })];
                                case 7:
                                    projectLsOutput = (_b.sent()).stdout;
                                    if (projectLsOutput.length <= 1) {
                                        throw Error(__1.intlMsg.lib_helpers_docker_projectFolderMissing({ image: imageName }));
                                    }
                                    return [4 /*yield*/, _1.runCommand("docker run --rm " + imageName + " /bin/bash -c \"ls /project/build\"", quiet).catch(function () { return ({ stdout: "" }); })];
                                case 8:
                                    buildLsOutput = (_b.sent()).stdout;
                                    if (buildLsOutput.indexOf(buildArtifact) === -1) {
                                        throw Error(__1.intlMsg.lib_helpers_docker_projectBuildFolderMissing({
                                            image: imageName,
                                            artifact: buildArtifact,
                                        }));
                                    }
                                    return [4 /*yield*/, _1.runCommand("docker cp root-" + imageName + ":/project/build/" + buildArtifact + " " + outputDir, quiet)];
                                case 9:
                                    _b.sent();
                                    return [4 /*yield*/, _1.runCommand("docker rm -f root-" + imageName, quiet)];
                                case 10:
                                    _b.sent();
                                    if (!useBuildx) return [3 /*break*/, 12];
                                    if (!removeBuilder) return [3 /*break*/, 12];
                                    return [4 /*yield*/, _1.runCommand("docker buildx rm " + imageName, quiet)];
                                case 11:
                                    _b.sent();
                                    _b.label = 12;
                                case 12:
                                    if (!removeImage) return [3 /*break*/, 14];
                                    return [4 /*yield*/, _1.runCommand("docker rmi " + imageName, quiet)];
                                case 13:
                                    _b.sent();
                                    _b.label = 14;
                                case 14: return [2 /*return*/];
                            }
                        });
                    }); };
                    if (!quiet) return [3 /*break*/, 2];
                    return [4 /*yield*/, run()];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    args = {
                        path: _1.displayPath(outputDir),
                        image: imageName,
                    };
                    return [4 /*yield*/, __1.withSpinner(__1.intlMsg.lib_helpers_docker_copyText(args), __1.intlMsg.lib_helpers_docker_copyError(args), __1.intlMsg.lib_helpers_docker_copyWarning(args), function (_spinner) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 3: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.copyArtifactsFromBuildImage = copyArtifactsFromBuildImage;
function createBuildImage(rootDir, imageName, dockerfile, cacheDir, useBuildx, quiet) {
    if (useBuildx === void 0) { useBuildx = false; }
    if (quiet === void 0) { quiet = true; }
    return __awaiter(this, void 0, void 0, function () {
        var run, args;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () { return __awaiter(_this, void 0, void 0, function () {
                        var _a, cacheFrom, cacheTo, buildxUseFailed, stderr, e_1, stdout;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _a = useBuildx;
                                    if (!_a) return [3 /*break*/, 2];
                                    return [4 /*yield*/, isDockerBuildxInstalled()];
                                case 1:
                                    _a = (_b.sent());
                                    _b.label = 2;
                                case 2:
                                    useBuildx = _a;
                                    if (!useBuildx) return [3 /*break*/, 10];
                                    cacheFrom = cacheDir && fs_1.default.existsSync(path_1.default.join(cacheDir, "index.json"))
                                        ? "--cache-from type=local,src=" + cacheDir
                                        : "";
                                    cacheTo = cacheDir ? "--cache-to type=local,dest=" + cacheDir : "";
                                    buildxUseFailed = void 0;
                                    _b.label = 3;
                                case 3:
                                    _b.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, _1.runCommand("docker buildx use " + imageName)];
                                case 4:
                                    stderr = (_b.sent()).stderr;
                                    buildxUseFailed = !!stderr;
                                    return [3 /*break*/, 6];
                                case 5:
                                    e_1 = _b.sent();
                                    buildxUseFailed = true;
                                    return [3 /*break*/, 6];
                                case 6:
                                    if (!buildxUseFailed) return [3 /*break*/, 8];
                                    return [4 /*yield*/, _1.runCommand("docker buildx create --use --name " + imageName, quiet)];
                                case 7:
                                    _b.sent();
                                    _b.label = 8;
                                case 8: return [4 /*yield*/, _1.runCommand("docker buildx build -f " + dockerfile + " -t " + imageName + " " + rootDir + " " + cacheFrom + " " + cacheTo + " --output=type=docker", quiet)];
                                case 9:
                                    _b.sent();
                                    return [3 /*break*/, 12];
                                case 10: return [4 /*yield*/, _1.runCommand("docker build -f " + dockerfile + " -t " + imageName + " " + rootDir, quiet, os_js_1.isWin()
                                        ? undefined
                                        : {
                                            DOCKER_BUILDKIT: "true",
                                        })];
                                case 11:
                                    _b.sent();
                                    _b.label = 12;
                                case 12: return [4 /*yield*/, _1.runCommand("docker image inspect " + imageName + " -f \"{{.ID}}\"", quiet)];
                                case 13:
                                    stdout = (_b.sent()).stdout;
                                    if (stdout.indexOf("sha256:") === -1) {
                                        throw Error(__1.intlMsg.lib_docker_invalidImageId({ imageId: stdout }));
                                    }
                                    return [2 /*return*/, stdout];
                            }
                        });
                    }); };
                    if (!quiet) return [3 /*break*/, 2];
                    return [4 /*yield*/, run()];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    args = {
                        image: imageName,
                        dockerfile: _1.displayPath(dockerfile),
                        context: _1.displayPath(rootDir),
                    };
                    return [4 /*yield*/, __1.withSpinner(__1.intlMsg.lib_helpers_docker_buildText(args), __1.intlMsg.lib_helpers_docker_buildError(args), __1.intlMsg.lib_helpers_docker_buildWarning(args), function (_spinner) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 3: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.createBuildImage = createBuildImage;
function generateDockerfile(templatePath, config) {
    var outputDir = path_1.default.dirname(templatePath);
    var outputFilePath = path_1.default.join(outputDir, "Dockerfile");
    var template = fs_1.default.readFileSync(templatePath, "utf-8");
    var dockerfile = mustache_1.default.render(template, config);
    os_js_1.writeFileSync(outputFilePath, dockerfile, "utf-8");
    return outputFilePath;
}
exports.generateDockerfile = generateDockerfile;
function generateDockerImageName(uuid) {
    return "polywrap-build-env-" + uuid;
}
exports.generateDockerImageName = generateDockerImageName;
function correctBuildContextPathsFromCompose(dockerComposePath) {
    var dockerComposeFile = js_yaml_1.default.safeLoad(fs_1.default.readFileSync(dockerComposePath, "utf-8"));
    var composeContextDir = path_1.default.dirname(path_1.default.resolve(dockerComposePath));
    var correctedServiceEntries = Object.entries(dockerComposeFile.services || {}).map(function (_a) {
        var _b = __read(_a, 2), serviceName = _b[0], value = _b[1];
        if (!value.build) {
            return [serviceName, value];
        }
        if (typeof value.build === "string") {
            return [
                serviceName,
                __assign(__assign({}, value), { build: path_1.default.isAbsolute(value.build)
                        ? value.build
                        : path_1.default.join(composeContextDir, value.build) }),
            ];
        }
        else {
            return [
                serviceName,
                __assign(__assign({}, value), { build: __assign(__assign({}, value.build), { context: path_1.default.isAbsolute(value.build.context)
                            ? value.build.context
                            : path_1.default.join(composeContextDir, value.build.context) }) }),
            ];
        }
    });
    return __assign(__assign({}, dockerComposeFile), { services: Object.fromEntries(correctedServiceEntries) });
}
exports.correctBuildContextPathsFromCompose = correctBuildContextPathsFromCompose;
//# sourceMappingURL=docker.js.map
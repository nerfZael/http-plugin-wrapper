"use strict";
//  https://github.com/aws/jsii/blob/main/packages/oo-ascii-tree/lib/ascii-tree.ts
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsciiTree = void 0;
var AsciiTree = /** @class */ (function () {
    function AsciiTree(text) {
        var e_1, _a;
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        this.text = text;
        this._children = new Array();
        try {
            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                this.add(child);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    AsciiTree.prototype.printTree = function (output) {
        var e_2, _a, e_3, _b, e_4, _c;
        if (output === void 0) { output = process.stdout; }
        var ancestorsPrefix = "";
        try {
            for (var _d = __values(this.ancestors), _e = _d.next(); !_e.done; _e = _d.next()) {
                var parent_1 = _e.value;
                if (parent_1.level <= 0) {
                    continue;
                }
                if (parent_1.last) {
                    ancestorsPrefix += "  ";
                }
                else {
                    ancestorsPrefix += " │";
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var myPrefix = "";
        var multilinePrefix = "";
        if (this.level > 0) {
            if (this.last) {
                if (!this.empty) {
                    myPrefix += " └─┬ ";
                    multilinePrefix += " └─┬ ";
                }
                else {
                    myPrefix += " └── ";
                    multilinePrefix = "     ";
                }
            }
            else {
                if (!this.empty) {
                    myPrefix += " ├─┬ ";
                    multilinePrefix += " │ │ ";
                }
                else {
                    myPrefix += " ├── ";
                    multilinePrefix += " │   ";
                }
            }
        }
        if (this.text) {
            output.write(ancestorsPrefix);
            output.write(myPrefix);
            var lines = this.text.split("\n");
            output.write(lines[0]);
            output.write("\n");
            try {
                for (var _f = __values(lines.splice(1)), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var line = _g.value;
                    output.write(ancestorsPrefix);
                    output.write(multilinePrefix);
                    output.write(line);
                    output.write("\n");
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        try {
            for (var _h = __values(this._children), _j = _h.next(); !_j.done; _j = _h.next()) {
                var child = _j.value;
                child.printTree(output);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    AsciiTree.prototype.toString = function () {
        var out = "";
        var printer = {
            write: function (data) {
                out += data;
                return true;
            },
        };
        this.printTree(printer);
        return out;
    };
    AsciiTree.prototype.add = function () {
        var e_5, _a;
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        try {
            for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {
                var child = children_2_1.value;
                child.parent = this;
                this._children.push(child);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    Object.defineProperty(AsciiTree.prototype, "children", {
        get: function () {
            return this._children.map(function (x) { return x; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsciiTree.prototype, "root", {
        get: function () {
            return !this.parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsciiTree.prototype, "last", {
        get: function () {
            if (!this.parent) {
                return true;
            }
            return (this.parent.children.indexOf(this) === this.parent.children.length - 1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsciiTree.prototype, "level", {
        get: function () {
            if (!this.parent) {
                return this.text ? 0 : -1;
            }
            return this.parent.level + 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsciiTree.prototype, "empty", {
        get: function () {
            return this.children.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AsciiTree.prototype, "ancestors", {
        get: function () {
            if (!this.parent) {
                return [];
            }
            return __spread(this.parent.ancestors, [this.parent]);
        },
        enumerable: false,
        configurable: true
    });
    return AsciiTree;
}());
exports.AsciiTree = AsciiTree;
//# sourceMappingURL=asciiTree.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchOptional = exports.step = exports.withSpinner = void 0;
var gluegun = __importStar(require("gluegun"));
// Executes the function `f` in a command-line spinner, using the
// provided captions for in-progress, error and failed messages.
//
// If `f` throws an error, the spinner stops with the failure message
//   and rethrows the error.
// If `f` returns an object with a `warning` and a `result` key, the
//   spinner stops with the warning message and returns the `result` value.
// Otherwise the spinner prints the in-progress message with a check mark
//   and simply returns the value returned by `f`.
exports.withSpinner = function (text, errorText, warningText, execute) { return __awaiter(void 0, void 0, void 0, function () {
    var spinner, result, res, hasWarning, hasResult, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                spinner = gluegun.print.spin({
                    text: text,
                    stream: process.stdout,
                });
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, execute(spinner)];
            case 2:
                result = _a.sent();
                if (result && typeof result === "object") {
                    res = result;
                    hasWarning = !!res.warning;
                    hasResult = !!res.result;
                    if (hasWarning && hasResult) {
                        if (res.warning !== null) {
                            spinner.warn(warningText + ": " + res.warning);
                        }
                        spinner.succeed(text);
                        return [2 /*return*/, res.result];
                    }
                    else {
                        spinner.succeed(text);
                        return [2 /*return*/, result];
                    }
                }
                else {
                    spinner.succeed(text);
                    return [2 /*return*/, result];
                }
                return [3 /*break*/, 4];
            case 3:
                e_1 = _a.sent();
                spinner.fail(errorText + ": " + e_1.message);
                throw e_1;
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.step = function (spinner, subject, text) {
    if (text) {
        spinner.stopAndPersist({
            text: gluegun.print.colors.muted(subject + " " + text),
        });
    }
    else {
        spinner.stopAndPersist({ text: gluegun.print.colors.muted(subject) });
    }
    spinner.start();
    return spinner;
};
exports.searchOptional = function (loadText, errorText, warningText, execute) { return __awaiter(void 0, void 0, void 0, function () {
    var spinner, result, e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                spinner = gluegun.print.spin({
                    text: loadText,
                    stream: process.stdout,
                });
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, execute(spinner)];
            case 2:
                result = _a.sent();
                if (!result) {
                    spinner.warn(warningText);
                }
                else {
                    spinner.succeed(loadText);
                }
                return [2 /*return*/, result];
            case 3:
                e_2 = _a.sent();
                spinner.fail(errorText + ": " + e_2.message);
                throw e_2;
            case 4: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=spinner.js.map
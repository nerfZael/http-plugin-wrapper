"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-empty-function */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
var _1 = require("./");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var client_js_1 = require("@polywrap/client-js");
var asyncify_js_1 = require("@polywrap/asyncify-js");
var os_js_1 = require("@polywrap/os-js");
var gluegun = __importStar(require("gluegun"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var Compiler = /** @class */ (function () {
    function Compiler(_config) {
        this._config = _config;
    }
    Compiler.prototype.codegen = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, run, e_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var state;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._getCompilerState()];
                                    case 1:
                                        state = _a.sent();
                                        return [4 /*yield*/, this._isInterface()];
                                    case 2:
                                        if (!!(_a.sent())) return [3 /*break*/, 4];
                                        // Generate the bindings
                                        return [4 /*yield*/, this._generateCode(state)];
                                    case 3:
                                        // Generate the bindings
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); };
                        if (!project.quiet) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, run()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_1 = _a.sent();
                        gluegun.print.error(e_1);
                        return [2 /*return*/, false];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, _1.withSpinner(_1.intlMsg.lib_compiler_codegenText(), _1.intlMsg.lib_compiler_codegenError(), _1.intlMsg.lib_compiler_codegenWarning(), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, run()];
                                });
                            }); })];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 7:
                        e_2 = _a.sent();
                        gluegun.print.error(e_2);
                        return [2 /*return*/, false];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype.compile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, run, e_3, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var state;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._getCompilerState()];
                                    case 1:
                                        state = _a.sent();
                                        // Init & clean output directory
                                        _1.resetDir(this._config.outputDir);
                                        // Output: schema.graphql
                                        return [4 /*yield*/, this._outputComposedSchema(state)];
                                    case 2:
                                        // Output: schema.graphql
                                        _a.sent();
                                        // Output: wrap.info
                                        return [4 /*yield*/, this._outputWrapManifest(state)];
                                    case 3:
                                        // Output: wrap.info
                                        _a.sent();
                                        return [4 /*yield*/, this._isInterface()];
                                    case 4:
                                        if (!!(_a.sent())) return [3 /*break*/, 7];
                                        // Generate the bindings
                                        return [4 /*yield*/, this._generateCode(state)];
                                    case 5:
                                        // Generate the bindings
                                        _a.sent();
                                        // Compile the Wrapper
                                        return [4 /*yield*/, this._buildModules()];
                                    case 6:
                                        // Compile the Wrapper
                                        _a.sent();
                                        _a.label = 7;
                                    case 7: 
                                    // Output Polywrap Metadata
                                    return [4 /*yield*/, this._outputPolywrapMetadata()];
                                    case 8:
                                        // Output Polywrap Metadata
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        if (!project.quiet) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, run()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_3 = _a.sent();
                        gluegun.print.error(e_3);
                        return [2 /*return*/, false];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, _1.withSpinner(_1.intlMsg.lib_compiler_compileText(), _1.intlMsg.lib_compiler_compileError(), _1.intlMsg.lib_compiler_compileWarning(), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, run()];
                                });
                            }); })];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 7:
                        e_4 = _a.sent();
                        gluegun.print.error(e_4);
                        return [2 /*return*/, false];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype.reset = function () {
        this._config.project.reset();
        this._config.schemaComposer.reset();
        this._state = undefined;
    };
    Compiler.prototype._getCompilerState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, polywrapManifest, composerOutput, buildImageDir, buildImageEntryFile, compilerOverrides, module_1, state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._state) {
                            return [2 /*return*/, this._state];
                        }
                        project = this._config.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        polywrapManifest = _a.sent();
                        return [4 /*yield*/, this._composeSchema()];
                    case 2:
                        composerOutput = _a.sent();
                        buildImageDir = __dirname + "/defaults/build-images/" + polywrapManifest.language;
                        buildImageEntryFile = path_1.default.join(buildImageDir, "index.ts");
                        if (!fs_1.default.existsSync(buildImageEntryFile)) return [3 /*break*/, 4];
                        return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require(buildImageDir)); })];
                    case 3:
                        module_1 = _a.sent();
                        // Get any compiler overrides for the given build-image
                        if (module_1.getCompilerOverrides) {
                            compilerOverrides = module_1.getCompilerOverrides();
                        }
                        if (compilerOverrides) {
                            // Validate the manifest for the given build-image
                            if (compilerOverrides.validateManifest) {
                                compilerOverrides.validateManifest(polywrapManifest);
                            }
                        }
                        _a.label = 4;
                    case 4:
                        state = {
                            composerOutput: composerOutput,
                            compilerOverrides: compilerOverrides,
                        };
                        return [4 /*yield*/, this._validateState(state)];
                    case 5:
                        _a.sent();
                        this._state = state;
                        return [2 /*return*/, this._state];
                }
            });
        });
    };
    Compiler.prototype._isInterface = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        return [2 /*return*/, manifest.language === "interface"];
                }
            });
        });
    };
    Compiler.prototype._composeSchema = function () {
        return __awaiter(this, void 0, void 0, function () {
            var schemaComposer, composerOutput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schemaComposer = this._config.schemaComposer;
                        return [4 /*yield*/, schemaComposer.getComposedSchemas()];
                    case 1:
                        composerOutput = _a.sent();
                        if (!composerOutput) {
                            throw Error(_1.intlMsg.lib_compiler_failedSchemaReturn());
                        }
                        return [2 /*return*/, composerOutput];
                }
            });
        });
    };
    Compiler.prototype._generateCode = function (state) {
        return __awaiter(this, void 0, void 0, function () {
            var composerOutput, compilerOverrides, project, binding;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        composerOutput = state.composerOutput, compilerOverrides = state.compilerOverrides;
                        project = this._config.project;
                        return [4 /*yield*/, project.generateSchemaBindings(composerOutput, compilerOverrides === null || compilerOverrides === void 0 ? void 0 : compilerOverrides.generationSubPath)];
                    case 1:
                        binding = _a.sent();
                        // Output the bindings
                        return [2 /*return*/, os_js_1.writeDirectorySync(binding.outputDirAbs, binding.output)];
                }
            });
        });
    };
    Compiler.prototype._buildModules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var outputDir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        outputDir = this._config.outputDir;
                        return [4 /*yield*/, this._isInterface()];
                    case 1:
                        if (_a.sent()) {
                            throw Error(_1.intlMsg.lib_compiler_cannotBuildInterfaceModules());
                        }
                        // Build the sources
                        return [4 /*yield*/, this._buildSourcesInDocker()];
                    case 2:
                        // Build the sources
                        _a.sent();
                        // Validate the Wasm module
                        return [4 /*yield*/, this._validateWasmModule(outputDir)];
                    case 3:
                        // Validate the Wasm module
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._buildSourcesInDocker = function () {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var _g, project, outputDir, buildManifestDir, buildManifest, imageName, _h, _j, dockerfile, dockerBuildxConfig, useBuildx, cacheDir, removeBuilder, cache, removeImage, dockerImageId;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _g = this._config, project = _g.project, outputDir = _g.outputDir;
                        return [4 /*yield*/, project.getBuildManifestDir()];
                    case 1:
                        buildManifestDir = _k.sent();
                        return [4 /*yield*/, project.getBuildManifest()];
                    case 2:
                        buildManifest = _k.sent();
                        _h = ((_a = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _a === void 0 ? void 0 : _a.name);
                        if (_h) return [3 /*break*/, 4];
                        _j = _1.generateDockerImageName;
                        return [4 /*yield*/, project.getBuildUuid()];
                    case 3:
                        _h = _j.apply(void 0, [_k.sent()]);
                        _k.label = 4;
                    case 4:
                        imageName = _h;
                        dockerfile = ((_b = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _b === void 0 ? void 0 : _b.dockerfile) ? path_1.default.join(buildManifestDir, (_c = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _c === void 0 ? void 0 : _c.dockerfile)
                            : path_1.default.join(buildManifestDir, "Dockerfile");
                        return [4 /*yield*/, project.cacheBuildManifestLinkedPackages()];
                    case 5:
                        _k.sent();
                        if (!!((_d = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _d === void 0 ? void 0 : _d.dockerfile)) return [3 /*break*/, 7];
                        // Make sure the default template is in the cached .polywrap/wasm/build/image folder
                        return [4 /*yield*/, project.cacheDefaultBuildImage()];
                    case 6:
                        // Make sure the default template is in the cached .polywrap/wasm/build/image folder
                        _k.sent();
                        dockerfile = _1.generateDockerfile(project.getCachePath(path_1.default.join(_1.PolywrapProject.cacheLayout.buildImageDir, "Dockerfile.mustache")), buildManifest.config || {});
                        _k.label = 7;
                    case 7:
                        dockerBuildxConfig = (_e = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _e === void 0 ? void 0 : _e.buildx;
                        useBuildx = !!dockerBuildxConfig;
                        removeBuilder = false;
                        if (dockerBuildxConfig && typeof dockerBuildxConfig !== "boolean") {
                            cache = dockerBuildxConfig.cache;
                            if (cache == true) {
                                cacheDir = project.getCachePath(_1.PolywrapProject.cacheLayout.buildImageCacheDir);
                            }
                            else if (cache) {
                                if (!path_1.default.isAbsolute(cache)) {
                                    cacheDir = path_1.default.join(project.getManifestDir(), cache);
                                }
                                else {
                                    cacheDir = cache;
                                }
                            }
                            removeBuilder = !!dockerBuildxConfig.removeBuilder;
                        }
                        removeImage = !!((_f = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.docker) === null || _f === void 0 ? void 0 : _f.removeImage);
                        // If the dockerfile path contains ".mustache", generate
                        if (dockerfile.indexOf(".mustache") > -1) {
                            dockerfile = _1.generateDockerfile(dockerfile, buildManifest.config || {});
                        }
                        return [4 /*yield*/, _1.createBuildImage(project.getManifestDir(), imageName, dockerfile, cacheDir, useBuildx, project.quiet)];
                    case 8:
                        dockerImageId = _k.sent();
                        return [4 /*yield*/, _1.copyArtifactsFromBuildImage(outputDir, "wrap.wasm", imageName, removeBuilder, removeImage, useBuildx, project.quiet)];
                    case 9:
                        _k.sent();
                        return [2 /*return*/, dockerImageId];
                }
            });
        });
    };
    Compiler.prototype._outputComposedSchema = function (state) {
        return __awaiter(this, void 0, void 0, function () {
            var outputDir;
            return __generator(this, function (_a) {
                outputDir = this._config.outputDir;
                if (!state.composerOutput.schema) {
                    // This is not being shown with intlMsg because this will be removed
                    throw Error("Compiler.outputComposedSchema: no schema found");
                }
                os_js_1.writeFileSync(outputDir + "/schema.graphql", state.composerOutput.schema, "utf-8");
                return [2 /*return*/];
            });
        });
    };
    Compiler.prototype._outputWrapManifest = function (state, quiet) {
        if (quiet === void 0) { quiet = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, outputDir, project, manifestPath, run;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._config, outputDir = _a.outputDir, project = _a.project;
                        manifestPath = outputDir + "/wrap.info";
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var manifest, abi, filteredAbi, info, s, encodedInfo;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        if (!state.composerOutput.abi) {
                                            throw Error(_1.intlMsg.lib_wrap_abi_not_found());
                                        }
                                        return [4 /*yield*/, project.getManifest()];
                                    case 1:
                                        manifest = _b.sent();
                                        abi = __assign({}, state.composerOutput.abi);
                                        filteredAbi = __assign({}, abi);
                                        Object.keys(filteredAbi).forEach(function (key) {
                                            var value = filteredAbi[key];
                                            if (value === null || value === undefined) {
                                                delete filteredAbi[key];
                                            }
                                        });
                                        _a = {
                                            abi: filteredAbi,
                                            name: manifest.name
                                        };
                                        return [4 /*yield*/, this._isInterface()];
                                    case 2:
                                        info = (_a.type = (_b.sent()) ? "interface" : "wasm",
                                            _a.version = "0.1.0",
                                            _a);
                                        s = JSON.stringify(info);
                                        encodedInfo = msgpack_js_1.msgpackEncode(JSON.parse(s));
                                        os_js_1.writeFileSync(manifestPath, encodedInfo, {
                                            encoding: "binary",
                                        });
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        if (!quiet) return [3 /*break*/, 2];
                        return [4 /*yield*/, run()];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        manifestPath = _1.displayPath(manifestPath);
                        return [4 /*yield*/, _1.withSpinner(_1.intlMsg.lib_helpers_wrap_manifest_outputText({
                                path: os_js_1.normalizePath(manifestPath),
                            }), _1.intlMsg.lib_helpers_wrap_manifest_outputError({
                                path: os_js_1.normalizePath(manifestPath),
                            }), _1.intlMsg.lib_helpers_wrap_manifest_outputWarning({
                                path: os_js_1.normalizePath(manifestPath),
                            }), function (_spinner) {
                                return Promise.resolve(run());
                            })];
                    case 3: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Compiler.prototype._outputPolywrapMetadata = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, outputDir, project, projectMetaManifest, builtMetaManifest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._config, outputDir = _a.outputDir, project = _a.project;
                        return [4 /*yield*/, project.getMetaManifest()];
                    case 1:
                        projectMetaManifest = _b.sent();
                        if (!projectMetaManifest) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, _1.outputMetadata(projectMetaManifest, outputDir, project.getManifestDir(), project.quiet)];
                    case 2:
                        builtMetaManifest = _b.sent();
                        return [4 /*yield*/, _1.outputManifest(builtMetaManifest, path_1.default.join(outputDir, "polywrap.meta.json"), project.quiet)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._validateState = function (state) {
        return __awaiter(this, void 0, void 0, function () {
            var composerOutput, project, manifest, missingSchemaMessage, missingModuleMessage, noInterfaceModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        composerOutput = state.composerOutput;
                        project = this._config.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        if (!composerOutput.schema) {
                            missingSchemaMessage = _1.intlMsg.lib_compiler_missingSchema();
                            throw Error(missingSchemaMessage);
                        }
                        if (manifest.language !== "interface" && !manifest.module) {
                            missingModuleMessage = _1.intlMsg.lib_compiler_missingModule();
                            throw Error(missingModuleMessage);
                        }
                        if (manifest.language === "interface" && manifest.module) {
                            noInterfaceModule = _1.intlMsg.lib_compiler_noInterfaceModule();
                            throw Error(noInterfaceModule);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._validateWasmModule = function (buildDir) {
        return __awaiter(this, void 0, void 0, function () {
            var modulePath, wasmSource, wrapImports, memory, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modulePath = path_1.default.join(buildDir, "wrap.wasm");
                        wasmSource = fs_1.default.readFileSync(modulePath);
                        wrapImports = {
                            __wrap_subinvoke: function () { },
                            __wrap_subinvoke_result_len: function () { },
                            __wrap_subinvoke_result: function () { },
                            __wrap_subinvoke_error_len: function () { },
                            __wrap_subinvoke_error: function () { },
                            __wrap_subinvokeImplementation: function () { },
                            __wrap_subinvokeImplementation_result_len: function () { },
                            __wrap_subinvokeImplementation_result: function () { },
                            __wrap_subinvokeImplementation_error_len: function () { },
                            __wrap_subinvokeImplementation_error: function () { },
                            __wrap_invoke_args: function () { },
                            __wrap_invoke_result: function () { },
                            __wrap_invoke_error: function () { },
                            __wrap_getImplementations: function () { },
                            __wrap_getImplementations_result_len: function () { },
                            __wrap_getImplementations_result: function () { },
                            __wrap_abort: function () { },
                            __wrap_debug_log: function () { },
                            __wrap_load_env: function () { },
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        memory = asyncify_js_1.AsyncWasmInstance.createMemory({ module: wasmSource });
                        return [4 /*yield*/, asyncify_js_1.AsyncWasmInstance.createInstance({
                                module: wasmSource,
                                imports: {
                                    env: {
                                        memory: memory,
                                    },
                                    wrap: wrapImports,
                                },
                                requiredExports: client_js_1.WasmWrapper.requiredExports,
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        throw Error(_1.intlMsg.lib_compiler_invalid_module({
                            modulePath: modulePath,
                            error: error_1,
                        }));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return Compiler;
}());
exports.Compiler = Compiler;
//# sourceMappingURL=Compiler.js.map
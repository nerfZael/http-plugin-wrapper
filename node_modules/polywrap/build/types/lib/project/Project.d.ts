import { AnyProjectManifest, AnyProjectManifestLanguage, CacheDirectory, CacheDirectoryConfig } from "../";
import { BindOutput } from "@polywrap/schema-bind";
import { ComposerOutput } from "@polywrap/schema-compose";
export interface ProjectConfig {
    rootDir: string;
    quiet?: boolean;
}
export declare abstract class Project<TManifest extends AnyProjectManifest> {
    protected _config: ProjectConfig;
    protected _cache: CacheDirectory;
    constructor(_config: ProjectConfig, _cache: CacheDirectoryConfig);
    static validateManifestLanguage(language: string | undefined, manifestLanguages: Record<string, string>, isManifestLanguage: (language: string) => boolean): void;
    abstract reset(): void;
    abstract validate(): Promise<void>;
    abstract getName(): Promise<string>;
    abstract getManifest(): Promise<TManifest>;
    abstract getManifestDir(): string;
    abstract getManifestPath(): string;
    abstract getManifestLanguage(): Promise<AnyProjectManifestLanguage>;
    abstract getSchemaNamedPath(): Promise<string>;
    abstract getImportRedirects(): Promise<{
        uri: string;
        schema: string;
    }[]>;
    abstract generateSchemaBindings(composerOutput: ComposerOutput, generationSubPath?: string): Promise<BindOutput>;
    get quiet(): boolean;
}

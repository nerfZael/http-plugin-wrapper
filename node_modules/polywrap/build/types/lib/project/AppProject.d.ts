import { Project, ProjectConfig } from ".";
import { AppManifestLanguage } from "./manifests";
import { AppManifest } from "@polywrap/polywrap-manifest-types-js";
import { Client } from "@polywrap/core-js";
import { ComposerOutput } from "@polywrap/schema-compose";
import { BindOutput } from "@polywrap/schema-bind";
export interface AppProjectConfig extends ProjectConfig {
    appManifestPath: string;
    client: Client;
}
export declare class AppProject extends Project<AppManifest> {
    protected _config: AppProjectConfig;
    private _appManifest;
    static cacheLayout: {
        root: string;
    };
    constructor(_config: AppProjectConfig);
    reset(): void;
    validate(): Promise<void>;
    getName(): Promise<string>;
    getManifest(): Promise<AppManifest>;
    getManifestDir(): string;
    getManifestPath(): string;
    getManifestLanguage(): Promise<AppManifestLanguage>;
    getSchemaNamedPath(): Promise<string>;
    getImportRedirects(): Promise<{
        uri: string;
        schema: string;
    }[]>;
    generateSchemaBindings(composerOutput: ComposerOutput, generationSubPath?: string): Promise<BindOutput>;
    private _getGenerationDirectory;
}

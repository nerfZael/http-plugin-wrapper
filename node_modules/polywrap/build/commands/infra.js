"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.infra = void 0;
var lib_1 = require("../lib");
var gluegun_1 = require("gluegun");
var path_1 = __importDefault(require("path"));
var commander_1 = require("commander");
var chalk_1 = __importDefault(require("chalk"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var fs_1 = require("fs");
var InfraActions;
(function (InfraActions) {
    InfraActions["UP"] = "up";
    InfraActions["DOWN"] = "down";
    InfraActions["VARS"] = "vars";
    InfraActions["CONFIG"] = "config";
})(InfraActions || (InfraActions = {}));
var DEFAULT_MODULES_PATH = path_1.default.join(__dirname, "..", "lib", "defaults", "infra-modules");
var moduleNameStr = lib_1.intlMsg.commands_infra_moduleName();
var manifestNameStr = lib_1.intlMsg.commands_infra_options_manifest();
var argumentsDescription = "\n  " + lib_1.intlMsg.commands_infra_actions_subtitle() + "\n  " + chalk_1.default.bold(InfraActions.UP) + "      " + lib_1.intlMsg.commands_infra_command_up() + "\n  " + chalk_1.default.bold(InfraActions.DOWN) + "    " + lib_1.intlMsg.commands_infra_command_down() + "\n  " + chalk_1.default.bold(InfraActions.CONFIG) + "   " + lib_1.intlMsg.commands_infra_command_config() + "\n  " + chalk_1.default.bold(InfraActions.VARS) + "     " + lib_1.intlMsg.commands_infra_command_vars() + "\n";
exports.infra = {
    setup: function (program) {
        program
            .command("infra")
            .alias("i")
            .description(lib_1.intlMsg.commands_infra_description())
            .usage("<action> [options]")
            .addArgument(new commander_1.Argument("<action>", argumentsDescription).choices([
            InfraActions.UP,
            InfraActions.DOWN,
            InfraActions.VARS,
            InfraActions.CONFIG,
        ]))
            .showHelpAfterError(true)
            .option("--manifest  <" + manifestNameStr + ">", lib_1.intlMsg.commands_infra_manifestPathDescription(), "polywrap.infra.yaml")
            .option("-m, --modules <" + moduleNameStr + "," + moduleNameStr + ">", lib_1.intlMsg.commands_infra_options_m())
            .option("-v, --verbose", lib_1.intlMsg.commands_infra_options_v())
            .action(function (action, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run(action, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(action, options) {
    return __awaiter(this, void 0, void 0, function () {
        var modules, verbose, manifest, modulesArray, manifestPath, infraManifest, e_1, infra, filteredModules, errorMsg_1, errorMsg, _a, _b, _c, _d, _e, _f, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    modules = options.modules, verbose = options.verbose, manifest = options.manifest;
                    modulesArray = [];
                    if (modules) {
                        modulesArray = modules.split(",").map(function (m) { return m.trim(); });
                    }
                    manifestPath = path_1.default.resolve(manifest);
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, lib_1.loadInfraManifest(manifestPath, !verbose)];
                case 2:
                    infraManifest = _h.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _h.sent();
                    if (!modulesArray.length) {
                        throw new Error(e_1.message + "\n\nTip: If no infra manifest is specified, a default module should be specified using the '--modules' option.\n\nDefault Modules: \n" + fs_1.readdirSync(DEFAULT_MODULES_PATH)
                            .map(function (m) { return "\n- " + m; })
                            .join("") + "\n\nExample: 'polywrap infra up --modules=eth-ens-ipfs'.");
                    }
                    return [3 /*break*/, 4];
                case 4:
                    infra = new lib_1.Infra({
                        rootDir: path_1.default.dirname(manifestPath),
                        modulesToUse: modulesArray,
                        infraManifest: infraManifest,
                        defaultInfraModulesPath: DEFAULT_MODULES_PATH,
                        quiet: !verbose,
                    });
                    filteredModules = infra.getFilteredModules();
                    if (!filteredModules.length) {
                        if (modules) {
                            errorMsg_1 = lib_1.intlMsg.commands_infra_error_noModulesMatch({
                                modules: modules,
                            });
                            gluegun_1.print.error(errorMsg_1);
                            return [2 /*return*/];
                        }
                        errorMsg = lib_1.intlMsg.commands_infra_error_noModulesDeclared();
                        gluegun_1.print.error(errorMsg);
                        return [2 /*return*/];
                    }
                    gluegun_1.print.info(lib_1.intlMsg.commands_infra_modulesUsed_text() + ": " + filteredModules
                        .map(function (f) { return "\n- " + f.name; })
                        .join("") + "\n");
                    _a = action;
                    switch (_a) {
                        case InfraActions.UP: return [3 /*break*/, 5];
                        case InfraActions.DOWN: return [3 /*break*/, 7];
                        case InfraActions.VARS: return [3 /*break*/, 9];
                        case InfraActions.CONFIG: return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 13];
                case 5: return [4 /*yield*/, infra.up()];
                case 6:
                    _h.sent();
                    return [3 /*break*/, 14];
                case 7: return [4 /*yield*/, infra.down()];
                case 8:
                    _h.sent();
                    return [3 /*break*/, 14];
                case 9:
                    _c = (_b = gluegun_1.print).info;
                    return [4 /*yield*/, infra.getVars()];
                case 10:
                    _c.apply(_b, [_h.sent()]);
                    return [3 /*break*/, 14];
                case 11:
                    _e = (_d = gluegun_1.print).info;
                    _g = (_f = js_yaml_1.default).safeDump;
                    return [4 /*yield*/, infra.config()];
                case 12:
                    _e.apply(_d, [_g.apply(_f, [(_h.sent()).data.config, { indent: 2 }])]);
                    return [3 /*break*/, 14];
                case 13: throw Error(lib_1.intlMsg.commands_infra_error_never());
                case 14: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=infra.js.map
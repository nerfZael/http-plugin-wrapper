"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
var lib_1 = require("../lib");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var gluegun_1 = require("gluegun");
var core_js_1 = require("@polywrap/core-js");
var jsonschema_1 = require("jsonschema");
var defaultManifestStr = lib_1.defaultPolywrapManifest.join(" | ");
var pathStr = lib_1.intlMsg.commands_deploy_options_o_path();
exports.deploy = {
    setup: function (program) {
        program
            .command("deploy")
            .alias("d")
            .description(lib_1.intlMsg.commands_deploy_description())
            .option("-m, --manifest-file <" + pathStr + ">", "" + lib_1.intlMsg.commands_deploy_options_m({
            default: defaultManifestStr,
        }))
            .option("-v, --verbose", "" + lib_1.intlMsg.commands_deploy_options_v())
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run(__assign(__assign({}, options), { manifestFile: lib_1.parseWasmManifestFileOption(options.manifestFile, undefined) }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(options) {
    var e_1, _a, e_2, _b;
    return __awaiter(this, void 0, void 0, function () {
        var manifestFile, verbose, project, deployManifest, packageNames, packageMap, stageToPackageMap, packageNames_1, packageNames_1_1, packageName, _c, _d, e_1_1, handlers, roots, roots_1, roots_1_1, root, e_2_1;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    manifestFile = options.manifestFile, verbose = options.verbose;
                    project = new lib_1.PolywrapProject({
                        rootDir: path_1.default.dirname(manifestFile),
                        polywrapManifestPath: manifestFile,
                        quiet: !verbose,
                    });
                    return [4 /*yield*/, project.validate()];
                case 1:
                    _e.sent();
                    return [4 /*yield*/, project.getDeployManifest()];
                case 2:
                    deployManifest = _e.sent();
                    if (!deployManifest) {
                        throw new Error("No deploy manifest found.");
                    }
                    packageNames = __spread(new Set(Object.values(deployManifest.stages).map(function (d) { return d.package; })));
                    sanitizePackages(packageNames);
                    return [4 /*yield*/, project.cacheDeployModules(packageNames)];
                case 3:
                    _e.sent();
                    packageMap = {};
                    stageToPackageMap = {};
                    _e.label = 4;
                case 4:
                    _e.trys.push([4, 10, 11, 16]);
                    packageNames_1 = __asyncValues(packageNames);
                    _e.label = 5;
                case 5: return [4 /*yield*/, packageNames_1.next()];
                case 6:
                    if (!(packageNames_1_1 = _e.sent(), !packageNames_1_1.done)) return [3 /*break*/, 9];
                    packageName = packageNames_1_1.value;
                    _c = packageMap;
                    _d = packageName;
                    return [4 /*yield*/, project.getDeployModule(packageName)];
                case 7:
                    _c[_d] = _e.sent();
                    _e.label = 8;
                case 8: return [3 /*break*/, 5];
                case 9: return [3 /*break*/, 16];
                case 10:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 16];
                case 11:
                    _e.trys.push([11, , 14, 15]);
                    if (!(packageNames_1_1 && !packageNames_1_1.done && (_a = packageNames_1.return))) return [3 /*break*/, 13];
                    return [4 /*yield*/, _a.call(packageNames_1)];
                case 12:
                    _e.sent();
                    _e.label = 13;
                case 13: return [3 /*break*/, 15];
                case 14:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 15: return [7 /*endfinally*/];
                case 16:
                    Object.entries(deployManifest.stages).forEach(function (_a) {
                        var _b = __read(_a, 2), stageName = _b[0], stageValue = _b[1];
                        stageToPackageMap[stageName] = packageMap[stageValue.package];
                    });
                    validateManifestWithExts(deployManifest, stageToPackageMap);
                    handlers = {};
                    roots = [];
                    // Create all handlers
                    Object.entries(deployManifest.stages).forEach(function (_a) {
                        var _b = __read(_a, 2), stageName = _b[0], stageValue = _b[1];
                        var publisher = stageToPackageMap[stageName].deployer;
                        handlers[stageName] = new lib_1.DeployerHandler(stageName, publisher, stageValue.config, gluegun_1.print);
                    });
                    // Establish dependency chains
                    Object.entries(deployManifest.stages).forEach(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        var thisHandler = handlers[key];
                        if (value.depends_on) {
                            // Depends on another stage
                            handlers[value.depends_on].addNext(thisHandler);
                        }
                        else if (value.uri) {
                            // It is a root node
                            roots.push({ uri: new core_js_1.Uri(value.uri), handler: thisHandler });
                        }
                        else {
                            throw new Error("Stage '" + key + "' needs either previous (depends_on) stage or URI");
                        }
                    });
                    _e.label = 17;
                case 17:
                    _e.trys.push([17, 23, 24, 29]);
                    roots_1 = __asyncValues(roots);
                    _e.label = 18;
                case 18: return [4 /*yield*/, roots_1.next()];
                case 19:
                    if (!(roots_1_1 = _e.sent(), !roots_1_1.done)) return [3 /*break*/, 22];
                    root = roots_1_1.value;
                    gluegun_1.print.info("\nExecuting deployment chain: \n");
                    root.handler.getDependencyTree().printTree();
                    gluegun_1.print.info("");
                    return [4 /*yield*/, root.handler.handle(root.uri)];
                case 20:
                    _e.sent();
                    _e.label = 21;
                case 21: return [3 /*break*/, 18];
                case 22: return [3 /*break*/, 29];
                case 23:
                    e_2_1 = _e.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 29];
                case 24:
                    _e.trys.push([24, , 27, 28]);
                    if (!(roots_1_1 && !roots_1_1.done && (_b = roots_1.return))) return [3 /*break*/, 26];
                    return [4 /*yield*/, _b.call(roots_1)];
                case 25:
                    _e.sent();
                    _e.label = 26;
                case 26: return [3 /*break*/, 28];
                case 27:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 28: return [7 /*endfinally*/];
                case 29: return [2 /*return*/];
            }
        });
    });
}
function sanitizePackages(packages) {
    var unrecognizedPackages = [];
    var availableDeployers = fs_1.default.readdirSync(path_1.default.join(__dirname, "..", "lib", "defaults", "deploy-modules"));
    packages.forEach(function (p) {
        if (!availableDeployers.includes(p)) {
            unrecognizedPackages.push(p);
        }
    });
    if (unrecognizedPackages.length) {
        throw new Error("Unrecognized packages: " + unrecognizedPackages.join(", "));
    }
}
function validateManifestWithExts(deployManifest, stageToPackageMap) {
    var errors = Object.entries(stageToPackageMap).flatMap(function (_a) {
        var _b = __read(_a, 2), stageName = _b[0], deployPackage = _b[1];
        return deployPackage.manifestExt
            ? jsonschema_1.validate(deployManifest.stages[stageName].config, deployPackage.manifestExt).errors
            : [];
    });
    if (errors.length) {
        throw new Error(__spread([
            "Validation errors encountered while sanitizing DeployManifest format " + deployManifest.format
        ], errors.map(function (error) { return error.toString(); })).join("\n"));
    }
}
//# sourceMappingURL=deploy.js.map
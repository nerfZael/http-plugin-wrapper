/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
import {
  Any{{#latest}}WrapManifest{{/latest}},
  {{#latest}}WrapManifest{{/latest}}Versions
} from ".";
{{#validators.length}}import * as Validators from "../validators";{{/validators.length}}
{{#formats}}
import schema_{{tsVersion}} from "@polywrap/wrap-manifest-schemas/formats/wrap.info/{{version}}.json";
{{/formats}}

import {
  Schema,
  Validator,
  ValidationError,
  ValidatorResult
} from "jsonschema";

type {{#latest}}WrapManifest{{/latest}}Schemas = {
  [key in {{#latest}}WrapManifest{{/latest}}Versions]: Schema | undefined
};

const schemas: {{#latest}}WrapManifest{{/latest}}Schemas = {
  {{#formats}}
  "{{version}}": schema_{{tsVersion}},
  {{/formats}}
};

const validator = new Validator();

{{#validators}}
Validator.prototype.{{.}} = Validators.{{.}};
{{/validators}}

export function validate{{#latest}}WrapManifest{{/latest}}(
  manifest: Any{{#latest}}WrapManifest{{/latest}},
  extSchema: Schema | undefined = undefined
): void {
  const schema = schemas[manifest.version as {{#latest}}WrapManifest{{/latest}}Versions];

  if (!schema) {
    throw Error(`Unrecognized {{#latest}}WrapManifest{{/latest}} schema version "${manifest.version}"\nmanifest: ${JSON.stringify(manifest, null, 2)}`);
  }

  const throwIfErrors = (result: ValidatorResult) => {
    if (result.errors.length) {
      throw new Error([
        `Validation errors encountered while sanitizing {{#latest}}WrapManifest{{/latest}} version ${manifest.version}`,
        ...result.errors.map((error: ValidationError) => error.toString())
      ].join("\n"));
    }
  };

  throwIfErrors(validator.validate(manifest, schema));

  if (extSchema) {
    throwIfErrors(validator.validate(manifest, extSchema));
  }
}

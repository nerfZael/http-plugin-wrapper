"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tracer = void 0;
var tracing_1 = require("@opentelemetry/tracing");
var exporter_zipkin_1 = require("@opentelemetry/exporter-zipkin");
var web_1 = require("@opentelemetry/web");
var api = __importStar(require("@opentelemetry/api"));
var browser_util_inspect_1 = __importDefault(require("browser-util-inspect"));
var isPromise = function (test) {
    return !!test && typeof test.then === "function";
};
var Tracer = /** @class */ (function () {
    function Tracer() {
    }
    Tracer.enableTracing = function (tracerName, serviceName) {
        if (serviceName === void 0) { serviceName = "Polywrap"; }
        this.traceEnabled = true;
        this._initProvider(serviceName);
        if (this._provider) {
            this._tracer = this._provider.getTracer(tracerName);
        }
    };
    Tracer.disableTracing = function () {
        this.traceEnabled = false;
    };
    Tracer.startSpan = function (spanName) {
        if (!this.traceEnabled)
            return;
        var currentSpan = this._currentSpan();
        var span = this._tracer.startSpan(spanName, {}, currentSpan
            ? api.trace.setSpanContext(api.context.active(), currentSpan.spanContext())
            : undefined);
        this._pushSpan(span);
    };
    Tracer.endSpan = function () {
        if (!this.traceEnabled)
            return;
        var span = this._currentSpan();
        if (span) {
            span.end();
            this._popSpan();
        }
    };
    Tracer.setAttribute = function (attrName, data) {
        if (!this.traceEnabled)
            return;
        var span = this._currentSpan();
        if (span) {
            span.setAttribute(attrName, JSON.stringify(browser_util_inspect_1.default(data)));
        }
    };
    Tracer.addEvent = function (event, data) {
        if (!this.traceEnabled)
            return;
        var span = this._currentSpan();
        if (span) {
            span.addEvent(event, { data: JSON.stringify(browser_util_inspect_1.default(data)) });
        }
    };
    Tracer.recordException = function (error) {
        if (!this.traceEnabled)
            return;
        var span = this._currentSpan();
        if (span) {
            // recordException converts the error into a span event.
            span.recordException(error);
            // If the exception means the operation results in an
            // error state, you can also use it to update the span status.
            span.setStatus({ code: api.SpanStatusCode.ERROR });
        }
    };
    Tracer.traceMethod = function (span) {
        return function (target, key, descriptor) {
            var original = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    Tracer.startSpan(span);
                    Tracer.setAttribute("args", __assign({}, args));
                    var result = original.apply(this, args);
                    if (isPromise(result)) {
                        return result.then(function (result) {
                            Tracer.setAttribute("output", result);
                            Tracer.endSpan();
                            return result;
                        });
                    }
                    else {
                        Tracer.setAttribute("output", result);
                        Tracer.endSpan();
                        return result;
                    }
                }
                catch (error) {
                    Tracer.recordException(error);
                    Tracer.endSpan();
                    throw error;
                }
            };
            return descriptor;
        };
    };
    Tracer.traceFunc = function (span, func) {
        var _this = this;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                _this.startSpan(span);
                _this.setAttribute("args", __assign({}, args));
                var result = func.apply(void 0, __spread(args));
                if (isPromise(result)) {
                    return result.then(function (result) {
                        _this.setAttribute("output", result);
                        _this.endSpan();
                        return result;
                    });
                }
                else {
                    _this.setAttribute("output", result);
                    _this.endSpan();
                    return result;
                }
            }
            catch (error) {
                _this.recordException(error);
                _this.endSpan();
                throw error;
            }
        };
    };
    Tracer._initProvider = function (serviceName) {
        if (this._provider)
            return;
        if (typeof window === "undefined") {
            this._provider = new tracing_1.BasicTracerProvider();
        }
        else {
            this._provider = new web_1.WebTracerProvider();
        }
        // Configure span processor to send spans to the exporter
        this._provider.addSpanProcessor(new tracing_1.SimpleSpanProcessor(new exporter_zipkin_1.ZipkinExporter({
            serviceName: serviceName,
        })));
        this._provider.register();
    };
    Tracer._pushSpan = function (span) {
        this._spans.push(span);
    };
    Tracer._currentSpan = function () {
        return this._spans.slice(-1)[0];
    };
    Tracer._popSpan = function () {
        this._spans.pop();
    };
    Tracer.traceEnabled = false;
    Tracer._provider = null;
    Tracer._spans = [];
    return Tracer;
}());
exports.Tracer = Tracer;
//# sourceMappingURL=index.js.map
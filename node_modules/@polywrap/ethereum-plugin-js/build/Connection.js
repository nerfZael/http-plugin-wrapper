"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConnection = exports.Connection = void 0;
var ethers_1 = require("ethers");
var providers_1 = require("@ethersproject/providers");
var address_1 = require("@ethersproject/address");
var Connection = /** @class */ (function () {
    function Connection(_config) {
        this._config = _config;
        var provider = _config.provider, signer = _config.signer;
        // Sanitize Provider & Signer
        this.setProvider(provider, signer !== undefined ? signer : 0);
    }
    Connection.fromConfigs = function (configs) {
        var e_1, _a;
        var connections = {};
        try {
            for (var _b = __values(Object.keys(configs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var network = _c.value;
                // Create the connection
                var connection = new Connection(configs[network]);
                var networkStr = network.toLowerCase();
                connections[networkStr] = connection;
                // Handle the case where `network` is a number
                var networkNumber = Number.parseInt(networkStr);
                if (networkNumber) {
                    var namedNetwork = providers_1.getNetwork(networkNumber);
                    connections[namedNetwork.name] = connection;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return connections;
    };
    Connection.fromNetwork = function (networkish) {
        if (typeof networkish === "string") {
            networkish = networkish.toLowerCase();
        }
        var provider = ethers_1.ethers.providers.getDefaultProvider(ethers_1.ethers.providers.getNetwork(networkish), {
            infura: "1xraqrFyjLg2yrVtsN543WdKqJC",
        });
        return new Connection({
            provider: provider,
        });
    };
    Connection.fromNode = function (node) {
        return new Connection({
            provider: node,
        });
    };
    Connection.prototype.setProvider = function (provider, signer) {
        this._config.provider = provider;
        if (typeof provider === "string") {
            this._client = ethers_1.ethers.providers.getDefaultProvider(provider, {
                infura: "1xraqrFyjLg2yrVtsN543WdKqJC",
            });
        }
        else {
            if (provider.anyNetwork !== undefined) {
                this._client = provider;
            }
            else {
                this._client = new providers_1.Web3Provider(provider);
            }
        }
        if (signer !== undefined) {
            this.setSigner(signer);
        }
    };
    Connection.prototype.getProvider = function () {
        return this._client;
    };
    Connection.prototype.setSigner = function (signer) {
        if (typeof signer === "string") {
            this._config.signer = address_1.getAddress(signer);
        }
        else if (ethers_1.Signer.isSigner(signer)) {
            this._config.signer = signer;
            if (!this._client) {
                throw Error("Please call \"setProvider(...)\" before calling setSigner(...)");
            }
            this._config.signer = signer.connect(this._client);
        }
        else {
            this._config.signer = signer;
        }
    };
    Connection.prototype.getSigner = function () {
        var signer = this._config.signer;
        if (signer === undefined) {
            throw Error("Signer is undefined, this should never happen.");
        }
        if (typeof signer === "string" || typeof signer === "number") {
            if (!this._client.getSigner) {
                throw Error("Connection.getSigner: Ethereum provider does not have a signer, " +
                    "probably because it's an external RPC connection.\n" +
                    ("Network: " + JSON.stringify(this._client._network, null, 2)));
            }
            return this._client.getSigner(signer);
        }
        else if (ethers_1.Signer.isSigner(signer)) {
            return signer;
        }
        else {
            throw Error("Signer is an unrecognized type, this should never happen. \n" + signer);
        }
    };
    Connection.prototype.getContract = function (address, abi, signer) {
        if (signer === void 0) { signer = true; }
        if (signer) {
            return new ethers_1.ethers.Contract(address, abi, this.getSigner());
        }
        else {
            return new ethers_1.ethers.Contract(address, abi, this._client);
        }
    };
    return Connection;
}());
exports.Connection = Connection;
function getConnection(connections, defaultNetwork, connection) {
    return __awaiter(this, void 0, void 0, function () {
        var networkNameOrChainId, node, result, networkStr, chainId, nodeConnection, nodeNetwork, establishedConnection;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!connection) {
                        return [2 /*return*/, connections[defaultNetwork]];
                    }
                    networkNameOrChainId = connection.networkNameOrChainId, node = connection.node;
                    // If a custom network is provided, either get an already
                    // established connection, or a create a new one
                    if (networkNameOrChainId) {
                        networkStr = networkNameOrChainId.toLowerCase();
                        if (connections[networkStr]) {
                            result = connections[networkStr];
                        }
                        else {
                            chainId = Number.parseInt(networkStr);
                            if (!isNaN(chainId)) {
                                result = Connection.fromNetwork(chainId);
                            }
                            else {
                                result = Connection.fromNetwork(networkStr);
                            }
                        }
                    }
                    else {
                        result = connections[defaultNetwork];
                    }
                    if (!node) return [3 /*break*/, 2];
                    nodeConnection = Connection.fromNode(node);
                    return [4 /*yield*/, nodeConnection.getProvider().getNetwork()];
                case 1:
                    nodeNetwork = _a.sent();
                    establishedConnection = connections[nodeNetwork.chainId.toString()] ||
                        connections[nodeNetwork.name];
                    if (establishedConnection) {
                        try {
                            nodeConnection.setSigner(establishedConnection.getSigner());
                        }
                        catch (e) {
                            // It's okay if there isn't a signer available.
                        }
                    }
                    result = nodeConnection;
                    _a.label = 2;
                case 2: return [2 /*return*/, result];
            }
        });
    });
}
exports.getConnection = getConnection;
//# sourceMappingURL=Connection.js.map
"use strict";
/// NOTE: This is an auto-generated file.
///       All modifications will be overwritten.
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
exports.schema = "### Polywrap Header START ###\nscalar UInt\nscalar UInt8\nscalar UInt16\nscalar UInt32\nscalar Int\nscalar Int8\nscalar Int16\nscalar Int32\nscalar Bytes\nscalar BigInt\nscalar BigNumber\nscalar JSON\nscalar Map\n\ndirective @imported(\n  uri: String!\n  namespace: String!\n  nativeType: String!\n) on OBJECT | ENUM\n\ndirective @imports(\n  types: [String!]!\n) on OBJECT\n\ndirective @capability(\n  type: String!\n  uri: String!\n  namespace: String!\n) repeatable on OBJECT\n\ndirective @enabled_interface on OBJECT\n\ndirective @annotate(type: String!) on FIELD\n\ndirective @env(required: Boolean!) on FIELD_DEFINITION\n\n### Polywrap Header END ###\n\ntype Module {\n  callContractView(\n    address: String!\n    method: String!\n    args: [String!]\n    connection: Connection\n  ): String!\n\n  callContractStatic(\n    address: String!\n    method: String!\n    args: [String!]\n    connection: Connection\n    txOverrides: TxOverrides\n  ): StaticTxResult!\n\n  getBalance(\n    address: String!\n    blockTag: BigInt\n    connection: Connection\n  ): BigInt!\n\n  encodeParams(\n    types: [String!]!\n    values: [String!]!\n  ): String!\n\n  encodeFunction(\n    method: String!\n    args: [String!]\n  ): String!\n\n  solidityPack(\n    types: [String!]!\n    values: [String!]!\n  ): String!\n\n  solidityKeccak256(\n    types: [String!]!\n    values: [String!]!\n  ): String!\n\n  soliditySha256(\n    types: [String!]!\n    values: [String!]!\n  ): String!\n\n  getSignerAddress(\n    connection: Connection\n  ): String!\n\n  getSignerBalance(\n    blockTag: BigInt\n    connection: Connection\n  ): BigInt!\n\n  getSignerTransactionCount(\n    blockTag: BigInt\n    connection: Connection\n  ): BigInt!\n\n  getGasPrice(\n    connection: Connection\n  ): BigInt!\n\n  estimateTransactionGas(\n    tx: TxRequest!\n    connection: Connection\n  ): BigInt!\n\n  estimateContractCallGas(\n    address: String!\n    method: String!\n    args: [String!]\n    connection: Connection\n    txOverrides: TxOverrides\n  ): BigInt!\n\n  checkAddress(\n    address: String!\n  ): Boolean!\n\n  toWei(\n    eth: String!\n  ): BigInt!\n\n  toEth(\n    wei: BigInt!\n  ): String!\n\n  awaitTransaction(\n    txHash: String!\n    confirmations: UInt32!\n    timeout: UInt32!\n    connection: Connection\n  ): TxReceipt!\n\n  waitForEvent(\n    address: String!\n    event: String!\n    args: [String!]\n    timeout: UInt32\n    connection: Connection\n  ): EventNotification!\n\n  getNetwork(\n    connection: Connection\n  ): Network!\n\n  callContractMethod(\n    address: String!\n    method: String!\n    args: [String!]\n    connection: Connection\n    txOverrides: TxOverrides\n  ): TxResponse!\n\n  callContractMethodAndWait(\n    address: String!\n    method: String!\n    args: [String!]\n    connection: Connection\n    txOverrides: TxOverrides\n  ): TxReceipt!\n\n  sendTransaction(\n    tx: TxRequest!\n    connection: Connection\n  ): TxResponse!\n\n  sendTransactionAndWait(\n    tx: TxRequest!\n    connection: Connection\n  ): TxReceipt!\n\n  deployContract(\n    abi: String!\n    bytecode: String!\n    args: [String!]\n    connection: Connection\n  ): String!\n\n  signMessage(\n    message: String!\n    connection: Connection\n  ): String!\n\n  sendRPC(\n    method: String!\n    params: [String!]!\n    connection: Connection\n  ): String\n}\n\ntype Env {\n  connection: Connection\n}\n\ntype TxReceipt {\n  to: String!\n  from: String!\n  contractAddress: String!\n  transactionIndex: UInt32!\n  root: String\n  gasUsed: BigInt!\n  logsBloom: String!\n  transactionHash: String!\n  logs: [Log!]!\n  blockNumber: BigInt!\n  blockHash: String!\n  confirmations: UInt32!\n  cumulativeGasUsed: BigInt!\n  effectiveGasPrice: BigInt!\n  byzantium: Boolean!\n  type: UInt32!\n  status: UInt32\n}\n\ntype TxResponse {\n  hash: String!\n  to: String\n  from: String!\n  nonce: UInt32!\n  gasLimit: BigInt!\n  gasPrice: BigInt\n  data: String!\n  value: BigInt!\n  chainId: BigInt!\n  blockNumber: BigInt\n  blockHash: String\n  timestamp: UInt32\n  confirmations: UInt32!\n  raw: String\n  r: String\n  s: String\n  v: UInt32\n  type: UInt32\n  accessList: [Access!]\n}\n\ntype TxRequest {\n  to: String\n  from: String\n  nonce: UInt32\n  gasLimit: BigInt\n  gasPrice: BigInt\n  data: String\n  value: BigInt\n  chainId: BigInt\n  type: UInt32\n}\n\ntype TxOverrides {\n  gasLimit: BigInt\n  gasPrice: BigInt\n  value: BigInt\n}\n\ntype StaticTxResult {\n  result: String!\n  error: Boolean!\n}\n\ntype Log {\n  blockNumber: BigInt!\n  blockHash: String!\n  transactionIndex: UInt32!\n  removed: Boolean!\n  address: String!\n  data: String!\n  topics: [String!]!\n  transactionHash: String!\n  logIndex: UInt32!\n}\n\ntype EventNotification {\n  data: String!\n  address: String!\n  log: Log!\n}\n\ntype Access {\n  address: String!\n  storageKeys: [String!]!\n}\n\ntype Connection {\n  node: String\n  networkNameOrChainId: String\n}\n\ntype Network {\n  name: String!\n  chainId: BigInt!\n  ensAddress: String\n}\n\n### Imported Modules START ###\n\n### Imported Modules END ###\n\n### Imported Objects START ###\n\n### Imported Objects END ###\n\n### Imported Envs START ###\n\n### Imported Envs END ###\n";
//# sourceMappingURL=schema.js.map
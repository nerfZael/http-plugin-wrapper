use serde::{Serialize, Deserialize};
use polywrap_wasm_rs::{
    BigInt,
    BigNumber,
    Map,
    Read,
    Write,
    JSON,
    subinvoke,
};
pub mod serialization;
{{#methods.length}}
pub use serialization::{
    {{#methods}}
    deserialize_{{#toLower}}{{name}}{{/toLower}}_result,
    serialize_{{#toLower}}{{name}}{{/toLower}}_args,
    Args{{#toUpper}}{{name}}{{/toUpper}}{{^last}},{{/last}}
    {{/methods}}
};
{{/methods.length}}
{{#propertyDeps.length}}

{{#propertyDeps}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/propertyDeps}}
{{/propertyDeps.length}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct {{#toUpper}}{{type}}{{/toUpper}} {}

impl {{#toUpper}}{{type}}{{/toUpper}} {
    pub const URI: &'static str = "{{uri}}";

    pub fn new() -> {{#toUpper}}{{type}}{{/toUpper}} {
        {{#toUpper}}{{type}}{{/toUpper}} {}
    }

    {{#methods}}
    pub fn {{#toLower}}{{name}}{{/toLower}}(args: &Args{{#toUpper}}{{name}}{{/toUpper}}) -> Result<{{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, String> {
        let uri = {{#parent}}{{#toUpper}}{{type}}{{/toUpper}}{{/parent}}::URI;
        let args = serialize_{{#toLower}}{{name}}{{/toLower}}_args(args).map_err(|e| e.to_string())?;
        let result = subinvoke::wrap_subinvoke(
            uri,
            "{{name}}",
            args,
        )?;
        deserialize_{{#toLower}}{{name}}{{/toLower}}_result(result.as_slice()).map_err(|e| e.to_string())
    }
    {{^last}}

    {{/last}}
    {{/methods}}
}

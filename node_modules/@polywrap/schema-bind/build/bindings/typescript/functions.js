"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toTypescript = exports.toFuncName = exports.toClassName = exports.toLowerCase = void 0;
var firstUpper = function (str) {
    return str ? str[0].toUpperCase() + str.slice(1) : "";
};
var firstLower = function (str) {
    return str ? str[0].toLowerCase() + str.slice(1) : "";
};
exports.toLowerCase = function () {
    return function (value, render) {
        var rendered = render(value);
        return rendered.toLowerCase();
    };
};
exports.toClassName = function () {
    return function (value, render) {
        var rendered = render(value);
        rendered.replace(/([^A-Za-z0-9])+/g, ",");
        return rendered
            .split(",")
            .map(function (x) { return (x ? firstUpper(x.replace(",", "")) : ""); })
            .join();
    };
};
exports.toFuncName = function () {
    return function (value, render) {
        var rendered = render(value);
        rendered = rendered.replace(/([^A-Za-z0-9])+/g, ",");
        return rendered
            .split(",")
            .map(function (x, index) {
            x = x.replace(",", "");
            return index === 0 ? firstLower(x) : firstUpper(x);
        })
            .join();
    };
};
exports.toTypescript = function () {
    return _toTypescript;
};
var _toTypescript = function (value, render, undefinable) {
    if (undefinable === void 0) { undefinable = false; }
    var type = render(value);
    var optional = false;
    if (type[type.length - 1] === "!") {
        type = type.substring(0, type.length - 1);
    }
    else {
        optional = true;
    }
    if (type[0] === "[") {
        return toTypescriptArray(type, optional);
    }
    if (type.startsWith("Map<")) {
        return toTypescriptMap(type, optional);
    }
    switch (type) {
        case "JSON":
            type = "Types.Json";
            break;
        default:
            if (type.includes("Enum_")) {
                type = "Types." + type.replace("Enum_", "");
            }
            else {
                type = "Types." + type;
            }
    }
    return undefinable
        ? applyUndefinable(type, optional)
        : applyOptional(type, optional);
};
var toTypescriptArray = function (type, optional) {
    var result = type.match(/(\[)([[\]A-Za-z0-9_.!]+)(\])/);
    if (!result || result.length !== 4) {
        throw Error("Invalid Array: " + type);
    }
    var tsType = _toTypescript(result[2], function (str) { return str; });
    return applyOptional("Array<" + tsType + ">", optional);
};
var toTypescriptMap = function (type, optional) {
    var openAngleBracketIdx = type.indexOf("<");
    var closeAngleBracketIdx = type.lastIndexOf(">");
    var _a = __read(type
        .substring(openAngleBracketIdx + 1, closeAngleBracketIdx)
        .split(",")
        .map(function (x) { return x.trim(); }), 2), keyType = _a[0], valtype = _a[1];
    var tsKeyType = _toTypescript(keyType, function (str) { return str; });
    var tsValType = _toTypescript(valtype, function (str) { return str; }, true);
    return applyOptional("Map<" + tsKeyType + ", " + tsValType + ">", optional);
};
var applyOptional = function (type, optional) {
    if (optional) {
        return type + " | null";
    }
    else {
        return type;
    }
};
var applyUndefinable = function (type, undefinable) {
    if (undefinable) {
        return type + " | undefined";
    }
    else {
        return type;
    }
};
//# sourceMappingURL=functions.js.map
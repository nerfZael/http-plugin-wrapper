"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toWasm = exports.toWasmInit = exports.toMsgPack = exports.handleKeywords = void 0;
var baseTypes_1 = require("./baseTypes");
var reservedWords_1 = require("./reservedWords");
exports.handleKeywords = function () {
    return function (text, render) {
        var rendered = render(text);
        if (reservedWords_1.reservedWordsAS.has(rendered)) {
            return "m_" + rendered;
        }
        return rendered;
    };
};
exports.toMsgPack = function () {
    return function (value, render) {
        var type = render(value);
        var modifier = "";
        if (type[type.length - 1] === "!") {
            type = type.substring(0, type.length - 1);
        }
        else {
            modifier = "Optional";
        }
        if (type[0] === "[") {
            return modifier + "Array";
        }
        if (type.startsWith("Map<")) {
            return modifier + "ExtGenericMap";
        }
        switch (type) {
            case "Int":
                return modifier + "Int32";
            case "UInt":
                return modifier + "UInt32";
            case "Boolean":
                return modifier + "Bool";
            default:
                return modifier + type;
        }
    };
};
exports.toWasmInit = function () {
    return function (value, render) {
        var type = render(value);
        if (type[type.length - 1] === "!") {
            type = type.substring(0, type.length - 1);
        }
        else {
            var nullType = exports.toWasm()(value, render);
            var optional = "Option";
            var nullOptional = "| null";
            if (nullType.endsWith(nullOptional)) {
                return "null";
            }
            else if (nullType.startsWith(optional)) {
                type = nullType.substring(6);
                return "Option.None" + type + "()";
            }
        }
        if (type[0] === "[") {
            return "[]";
        }
        if (type.startsWith("Map<")) {
            var openBracketIdx = type.indexOf("<");
            var closeBracketIdx = type.lastIndexOf(">");
            var _a = __read(type
                .substring(openBracketIdx + 1, closeBracketIdx)
                .split(",")
                .map(function (x) { return exports.toWasm()(x.trim(), render); }), 2), key = _a[0], value_1 = _a[1];
            return "new Map<" + key + ", " + value_1 + ">()";
        }
        switch (type) {
            case "Int":
            case "Int8":
            case "Int16":
            case "Int32":
            case "UInt":
            case "UInt8":
            case "UInt16":
            case "UInt32":
                return "0";
            case "String":
                return "\"\"";
            case "Boolean":
                return "false";
            case "Bytes":
                return "new ArrayBuffer(0)";
            case "BigInt":
                return "BigInt.fromUInt16(0)";
            case "BigNumber":
                return "new BigNumber(BigInt.fromUInt16(0), 0, 0)";
            case "JSON":
                return "JSON.Value.Null()";
            default:
                if (type.includes("Enum_")) {
                    return "0";
                }
                else {
                    return "new Types." + type + "()";
                }
        }
    };
};
exports.toWasm = function () {
    return function (value, render) {
        var type = render(value);
        var isEnum = false;
        var optional = false;
        if (type[type.length - 1] === "!") {
            type = type.substring(0, type.length - 1);
        }
        else {
            optional = true;
        }
        if (type[0] === "[") {
            return toWasmArray(type, optional);
        }
        if (type.startsWith("Map<")) {
            return toWasmMap(type, optional);
        }
        switch (type) {
            case "Int":
                type = "i32";
                break;
            case "Int8":
                type = "i8";
                break;
            case "Int16":
                type = "i16";
                break;
            case "Int32":
                type = "i32";
                break;
            case "UInt":
            case "UInt32":
                type = "u32";
                break;
            case "UInt8":
                type = "u8";
                break;
            case "UInt16":
                type = "u16";
                break;
            case "String":
                type = "string";
                break;
            case "Boolean":
                type = "bool";
                break;
            case "Bytes":
                type = "ArrayBuffer";
                break;
            case "BigInt":
                type = "BigInt";
                break;
            case "BigNumber":
                type = "BigNumber";
                break;
            case "JSON":
                type = "JSON.Value";
                break;
            default:
                if (type.includes("Enum_")) {
                    type = "Types." + type.replace("Enum_", "");
                    isEnum = true;
                }
                else {
                    type = "Types." + type;
                }
        }
        return applyOptional(type, optional, isEnum);
    };
};
var toWasmArray = function (type, optional) {
    var result = type.match(/(\[)([[\]A-Za-z0-9_.!]+)(\])/);
    if (!result || result.length !== 4) {
        throw Error("Invalid Array: " + type);
    }
    var wasmType = exports.toWasm()(result[2], function (str) { return str; });
    return applyOptional("Array<" + wasmType + ">", optional, false);
};
var toWasmMap = function (type, optional) {
    var firstOpenBracketIdx = type.indexOf("<");
    var lastCloseBracketIdx = type.lastIndexOf(">");
    if (!(firstOpenBracketIdx !== -1 && lastCloseBracketIdx !== -1)) {
        throw new Error("Invalid Map: " + type);
    }
    var keyValTypes = type
        .substring(firstOpenBracketIdx + 1, lastCloseBracketIdx)
        .split(",")
        .map(function (x) { return x.trim(); });
    if (keyValTypes.length !== 2 || !keyValTypes[0] || !keyValTypes[1]) {
        throw new Error("Invalid Map: " + type);
    }
    var keyType = exports.toWasm()(keyValTypes[0], function (str) { return str; });
    var valType = exports.toWasm()(keyValTypes[1], function (str) { return str; });
    return applyOptional("Map<" + keyType + ", " + valType + ">", optional, false);
};
var applyOptional = function (type, optional, isEnum) {
    if (optional) {
        if (type.indexOf("Array") === 0 ||
            type.indexOf("string") === 0 ||
            (!isEnum && !baseTypes_1.isBaseType(type))) {
            return type + " | null";
        }
        else {
            return "Option<" + type + ">";
        }
    }
    else {
        return type;
    }
};
//# sourceMappingURL=functions.js.map
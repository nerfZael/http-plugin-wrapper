"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineAbi = exports.createAbi = void 0;
var definitions_1 = require("./definitions");
__exportStar(require("./definitions"), exports);
__exportStar(require("./scalar"), exports);
__exportStar(require("./module"), exports);
__exportStar(require("./env"), exports);
__exportStar(require("./map"), exports);
function createAbi() {
    return {
        objectTypes: [],
        enumTypes: [],
        interfaceTypes: [],
        importedObjectTypes: [],
        importedModuleTypes: [],
        importedEnumTypes: [],
        importedEnvTypes: [],
    };
}
exports.createAbi = createAbi;
function combineAbi(abis) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h;
    var combined = {
        objectTypes: [],
        moduleType: definitions_1.createModuleDefinition({}),
        enumTypes: [],
        interfaceTypes: [],
        importedObjectTypes: [],
        importedModuleTypes: [],
        importedEnumTypes: [],
        importedEnvTypes: [],
    };
    var compareImportedType = function (a, b) {
        return a.uri === b.uri && a.nativeType === b.nativeType;
    };
    try {
        for (var abis_1 = __values(abis), abis_1_1 = abis_1.next(); !abis_1_1.done; abis_1_1 = abis_1.next()) {
            var abi = abis_1_1.value;
            try {
                for (var _j = (e_2 = void 0, __values(abi.enumTypes)), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var enumType = _k.value;
                    tryInsert(combined.enumTypes, enumType);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var _l = (e_3 = void 0, __values(abi.objectTypes)), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var objectType = _m.value;
                    tryInsert(combined.objectTypes, objectType);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
            combined.moduleType = abi.moduleType;
            try {
                for (var _o = (e_4 = void 0, __values(abi.interfaceTypes)), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var interfaceType = _p.value;
                    tryInsert(combined.interfaceTypes, interfaceType, compareImportedType, function (a, b) {
                        var e_9, _a;
                        var combinedCapabilities = __assign(__assign({}, a.capabilities), b.capabilities);
                        var combinedCapabilityTypes = Object.keys(combinedCapabilities);
                        try {
                            for (var combinedCapabilityTypes_1 = (e_9 = void 0, __values(combinedCapabilityTypes)), combinedCapabilityTypes_1_1 = combinedCapabilityTypes_1.next(); !combinedCapabilityTypes_1_1.done; combinedCapabilityTypes_1_1 = combinedCapabilityTypes_1.next()) {
                                var capability = combinedCapabilityTypes_1_1.value;
                                if (b.capabilities[capability] && a.capabilities[capability]) {
                                    combinedCapabilities[capability] = {
                                        enabled: true,
                                    };
                                }
                                else if (a.capabilities[capability]) {
                                    combinedCapabilities[capability] = a.capabilities[capability];
                                }
                                else if (b.capabilities[capability]) {
                                    combinedCapabilities[capability] = b.capabilities[capability];
                                }
                            }
                        }
                        catch (e_9_1) { e_9 = { error: e_9_1 }; }
                        finally {
                            try {
                                if (combinedCapabilityTypes_1_1 && !combinedCapabilityTypes_1_1.done && (_a = combinedCapabilityTypes_1.return)) _a.call(combinedCapabilityTypes_1);
                            }
                            finally { if (e_9) throw e_9.error; }
                        }
                        return __assign(__assign({}, a), { capabilities: combinedCapabilities });
                    });
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
            if (abi.envType) {
                combined.envType = abi.envType;
            }
            try {
                for (var _q = (e_5 = void 0, __values(abi.importedObjectTypes)), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var importedObjectType = _r.value;
                    tryInsert(combined.importedObjectTypes, importedObjectType, compareImportedType);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
            try {
                for (var _s = (e_6 = void 0, __values(abi.importedModuleTypes)), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var importedModuleType = _t.value;
                    tryInsert(combined.importedModuleTypes, importedModuleType, compareImportedType, function (a, b) {
                        return __assign(__assign({}, a), { isInterface: a.isInterface || b.isInterface });
                    });
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_f = _s.return)) _f.call(_s);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _u = (e_7 = void 0, __values(abi.importedEnumTypes)), _v = _u.next(); !_v.done; _v = _u.next()) {
                    var importedEnumType = _v.value;
                    tryInsert(combined.importedEnumTypes, importedEnumType);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_v && !_v.done && (_g = _u.return)) _g.call(_u);
                }
                finally { if (e_7) throw e_7.error; }
            }
            try {
                for (var _w = (e_8 = void 0, __values(abi.importedEnvTypes)), _x = _w.next(); !_x.done; _x = _w.next()) {
                    var importedEnvType = _x.value;
                    tryInsert(combined.importedEnvTypes, importedEnvType, compareImportedType);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_x && !_x.done && (_h = _w.return)) _h.call(_w);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (abis_1_1 && !abis_1_1.done && (_a = abis_1.return)) _a.call(abis_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return combined;
}
exports.combineAbi = combineAbi;
var tryInsert = function (dest, value, compare, join) {
    if (compare === void 0) { compare = function (a, b) {
        return a.type === b.type;
    }; }
    var index = dest.findIndex(function (item) {
        return compare(item, value);
    });
    if (index > -1) {
        if (join) {
            dest[index] = join(dest[index], value);
            return;
        }
        var destType = JSON.stringify(dest[index]);
        var valueType = JSON.stringify(value);
        if (destType !== valueType) {
            throw Error("combineAbi found two types by the same type that are not equivalent.\n" +
                ("Type: \"" + value.type + "\"\nObject A: " + destType + "\nObject B: " + valueType));
        }
    }
    else {
        dest.push(value);
    }
};
//# sourceMappingURL=index.js.map
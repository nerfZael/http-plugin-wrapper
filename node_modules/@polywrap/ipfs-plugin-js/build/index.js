"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.ipfsPlugin = exports.IpfsPlugin = void 0;
var wrap_1 = require("./wrap");
var exec_1 = require("./utils/exec");
// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports, @typescript-eslint/naming-convention
var createIpfsClient = require("@dorgjelli-test/ipfs-http-client-lite");
var getOptions = function (args, env) {
    var options = args || {};
    if (options.disableParallelRequests === undefined ||
        options.disableParallelRequests === null) {
        options.disableParallelRequests = env.disableParallelRequests;
    }
    return options;
};
var IpfsPlugin = /** @class */ (function (_super) {
    __extends(IpfsPlugin, _super);
    function IpfsPlugin(config) {
        var _this = _super.call(this, config) || this;
        _this._ipfs = createIpfsClient(_this.config.provider);
        return _this;
    }
    IpfsPlugin.prototype.cat = function (args, _client) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._execWithOptions("cat", function (ipfs, _provider, options) {
                            return ipfs.cat(args.cid, options);
                        }, (_a = args.options) !== null && _a !== void 0 ? _a : undefined)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    IpfsPlugin.prototype.resolve = function (args, _client) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = getOptions(args.options, this.env);
                        return [4 /*yield*/, this._execWithOptions("resolve", function (ipfs, provider, options) { return __awaiter(_this, void 0, void 0, function () {
                                var path;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, ipfs.resolve(args.cid, options)];
                                        case 1:
                                            path = (_a.sent()).path;
                                            return [2 /*return*/, {
                                                    cid: path,
                                                    provider: provider,
                                                }];
                                    }
                                });
                            }); }, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IpfsPlugin.prototype.addFile = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._ipfs.add(new Uint8Array(args.data))];
                    case 1:
                        result = _a.sent();
                        if (result.length === 0) {
                            throw Error("IpfsPlugin:add failed to add contents. Result of length 0 returned.");
                        }
                        return [2 /*return*/, result[0].hash.toString()];
                }
            });
        });
    };
    IpfsPlugin.prototype._execWithOptions = function (operation, func, options) {
        return __awaiter(this, void 0, void 0, function () {
            var timeout, providers, ipfs, defaultProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!options) return [3 /*break*/, 2];
                        return [4 /*yield*/, exec_1.execSimple(operation, this._ipfs, this.config.provider, 0, func)];
                    case 1: 
                    // Default behavior if no options are provided
                    return [2 /*return*/, _a.sent()];
                    case 2:
                        timeout = options.timeout || 0;
                        providers = __spread([
                            this.config.provider
                        ], (this.config.fallbackProviders || []));
                        ipfs = this._ipfs;
                        defaultProvider = this.config.provider;
                        // Use the provider default override specified
                        if (options.provider) {
                            providers = __spread([options.provider], providers);
                            ipfs = createIpfsClient(options.provider);
                            defaultProvider = options.provider;
                        }
                        return [4 /*yield*/, exec_1.execFallbacks(operation, ipfs, defaultProvider, providers, timeout, func, {
                                parallel: !options.disableParallelRequests,
                            })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return IpfsPlugin;
}(wrap_1.Module));
exports.IpfsPlugin = IpfsPlugin;
exports.ipfsPlugin = function (config) {
    return {
        factory: function () { return new IpfsPlugin(config); },
        manifest: wrap_1.manifest,
    };
};
exports.plugin = exports.ipfsPlugin;
//# sourceMappingURL=index.js.map
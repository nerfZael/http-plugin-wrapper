import { InvokeOptions, InvokeResult, InvocableResult, Wrapper, Uri, Client, Env, GetFileOptions, GetManifestOptions } from "@polywrap/core-js";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
export interface State {
    method: string;
    args: Uint8Array;
    invoke: {
        result?: Uint8Array;
        error?: string;
    };
    subinvoke: {
        result?: Uint8Array;
        error?: string;
        args: unknown[];
    };
    subinvokeImplementation: {
        result?: Uint8Array;
        error?: string;
        args: unknown[];
    };
    invokeResult: InvokeResult;
    getImplementationsResult?: Uint8Array;
    env: Uint8Array;
}
export declare class WasmWrapper extends Wrapper {
    private _uri;
    private _manifest;
    private _uriResolver;
    private _clientEnv?;
    static requiredExports: readonly string[];
    private _info;
    private _schema?;
    private _wasm;
    constructor(_uri: Uri, _manifest: WrapManifest, _uriResolver: string, _clientEnv?: Env<Uri> | undefined);
    getFile(options: GetFileOptions, client: Client): Promise<Uint8Array | string>;
    getManifest(options: GetManifestOptions, client: Client): Promise<WrapManifest>;
    invoke(options: InvokeOptions<Uri>, client: Client): Promise<InvocableResult<Uint8Array>>;
    getSchema(client: Client): Promise<string>;
    private _processInvokeResult;
    private _getClientEnv;
    private _getWasmModule;
}

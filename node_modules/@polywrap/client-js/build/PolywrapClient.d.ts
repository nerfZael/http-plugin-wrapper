import { Client, ClientConfig, Env, GetEnvsOptions, GetFileOptions, GetManifestOptions, GetImplementationsOptions, GetInterfacesOptions, GetPluginsOptions, GetRedirectsOptions, GetSchemaOptions, InterfaceImplementations, InvokeResult, InvokerOptions, PluginRegistration, QueryOptions, QueryResult, SubscribeOptions, Subscription, Uri, UriRedirect, ResolveUriOptions, ResolveUriResult, UriResolver, GetUriResolversOptions, RunOptions } from "@polywrap/core-js";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
export interface PolywrapClientConfig<TUri extends Uri | string = string> extends ClientConfig<TUri> {
    tracingEnabled: boolean;
}
export declare class PolywrapClient implements Client {
    private _wrapperCache;
    private _config;
    private _contexts;
    constructor(config?: Partial<PolywrapClientConfig>, options?: {
        noDefaults?: boolean;
    });
    setTracingEnabled(enable: boolean): void;
    getRedirects(options?: GetRedirectsOptions): readonly UriRedirect<Uri>[];
    getPlugins(options?: GetPluginsOptions): readonly PluginRegistration<Uri>[];
    getInterfaces(options?: GetInterfacesOptions): readonly InterfaceImplementations<Uri>[];
    getEnvs(options?: GetEnvsOptions): readonly Env<Uri>[];
    getUriResolvers(options?: GetUriResolversOptions): readonly UriResolver[];
    getEnvByUri<TUri extends Uri | string>(uri: TUri, options: GetEnvsOptions): Env<Uri> | undefined;
    getSchema<TUri extends Uri | string>(uri: TUri, options?: GetSchemaOptions): Promise<string>;
    getManifest<TUri extends Uri | string>(uri: TUri, options: GetManifestOptions): Promise<WrapManifest>;
    getFile<TUri extends Uri | string>(uri: TUri, options: GetFileOptions): Promise<string | Uint8Array>;
    getImplementations<TUri extends Uri | string>(uri: TUri, options?: GetImplementationsOptions): TUri[];
    query<TData extends Record<string, unknown> = Record<string, unknown>, TVariables extends Record<string, unknown> = Record<string, unknown>, TUri extends Uri | string = string>(options: QueryOptions<TVariables, TUri, PolywrapClientConfig>): Promise<QueryResult<TData>>;
    invoke<TData = unknown, TUri extends Uri | string = string>(options: InvokerOptions<TUri, PolywrapClientConfig>): Promise<InvokeResult<TData>>;
    run<TData extends Record<string, unknown> = Record<string, unknown>, TUri extends Uri | string = string>(options: RunOptions<TData, TUri>): Promise<void>;
    subscribe<TData = unknown, TUri extends Uri | string = string>(options: SubscribeOptions<TUri, PolywrapClientConfig>): Subscription<TData>;
    resolveUri<TUri extends Uri | string>(uri: TUri, options?: ResolveUriOptions<ClientConfig>): Promise<ResolveUriResult>;
    loadUriResolvers(): Promise<{
        success: boolean;
        failedUriResolvers: string[];
    }>;
    private _addDefaultConfig;
    private _isContextualized;
    private _getConfig;
    private _sanitizeConfig;
    private _sanitizePlugins;
    private _sanitizeInterfacesAndImplementations;
    private _validateConfig;
    private _toUri;
    /**
     * Sets invoke context:
     *  1. !parentId && !context  -> do nothing
     *  2. parentId && !context   -> do nothing, use parent context ID
     *  3. !parentId && context   -> create context ID, default config as "base", cache context
     *  4. parentId && context    -> create context ID, parent config as "base", cache context
     */
    private _setContext;
    private _clearContext;
    private _loadWrapper;
}

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolywrapClient = void 0;
var default_client_config_1 = require("./default-client-config");
var uuid_1 = require("uuid");
var core_js_1 = require("@polywrap/core-js");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var tracing_js_1 = require("@polywrap/tracing-js");
var PolywrapClient = /** @class */ (function () {
    function PolywrapClient(config, options) {
        var _a;
        // TODO: the Wrapper cache needs to be more like a routing table.
        // It should help us keep track of what URI's map to what Wrappers,
        // and handle cases where the are multiple jumps. For example, if
        // A => B => C, then the cache should have A => C, and B => C.
        this._wrapperCache = new Map();
        this._config = {
            redirects: [],
            plugins: [],
            interfaces: [],
            envs: [],
            uriResolvers: [],
            tracingEnabled: false,
        };
        // Invoke specific contexts
        this._contexts = new Map();
        try {
            this.setTracingEnabled(!!(config === null || config === void 0 ? void 0 : config.tracingEnabled));
            tracing_js_1.Tracer.startSpan("PolywrapClient: constructor");
            if (config) {
                this._config = {
                    redirects: config.redirects
                        ? core_js_1.sanitizeUriRedirects(config.redirects)
                        : [],
                    envs: config.envs ? core_js_1.sanitizeEnvs(config.envs) : [],
                    plugins: config.plugins
                        ? core_js_1.sanitizePluginRegistrations(config.plugins)
                        : [],
                    interfaces: config.interfaces
                        ? core_js_1.sanitizeInterfaceImplementations(config.interfaces)
                        : [],
                    uriResolvers: (_a = config.uriResolvers) !== null && _a !== void 0 ? _a : [],
                    tracingEnabled: !!config.tracingEnabled,
                };
            }
            if (!(options === null || options === void 0 ? void 0 : options.noDefaults)) {
                this._addDefaultConfig();
            }
            this._validateConfig();
            this._sanitizeConfig();
            tracing_js_1.Tracer.setAttribute("config", this._config);
        }
        catch (error) {
            tracing_js_1.Tracer.recordException(error);
            throw error;
        }
        finally {
            tracing_js_1.Tracer.endSpan();
        }
    }
    PolywrapClient.prototype.setTracingEnabled = function (enable) {
        if (enable) {
            tracing_js_1.Tracer.enableTracing("PolywrapClient");
        }
        else {
            tracing_js_1.Tracer.disableTracing();
        }
        this._config.tracingEnabled = enable;
    };
    PolywrapClient.prototype.getRedirects = function (options) {
        if (options === void 0) { options = {}; }
        return this._getConfig(options.contextId).redirects;
    };
    PolywrapClient.prototype.getPlugins = function (options) {
        if (options === void 0) { options = {}; }
        return this._getConfig(options.contextId).plugins;
    };
    PolywrapClient.prototype.getInterfaces = function (options) {
        if (options === void 0) { options = {}; }
        return this._getConfig(options.contextId).interfaces;
    };
    PolywrapClient.prototype.getEnvs = function (options) {
        if (options === void 0) { options = {}; }
        return this._getConfig(options.contextId).envs;
    };
    PolywrapClient.prototype.getUriResolvers = function (options) {
        if (options === void 0) { options = {}; }
        return this._getConfig(options.contextId).uriResolvers;
    };
    PolywrapClient.prototype.getEnvByUri = function (uri, options) {
        var uriUri = this._toUri(uri);
        return this.getEnvs(options).find(function (environment) {
            return core_js_1.Uri.equals(environment.uri, uriUri);
        });
    };
    PolywrapClient.prototype.getSchema = function (uri, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var wrapper, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._loadWrapper(this._toUri(uri), options)];
                    case 1:
                        wrapper = _a.sent();
                        client = contextualizeClient(this, options.contextId);
                        return [4 /*yield*/, wrapper.getSchema(client)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolywrapClient.prototype.getManifest = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var wrapper, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._loadWrapper(this._toUri(uri), options)];
                    case 1:
                        wrapper = _a.sent();
                        client = contextualizeClient(this, options.contextId);
                        return [4 /*yield*/, wrapper.getManifest(options, client)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolywrapClient.prototype.getFile = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var wrapper, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._loadWrapper(this._toUri(uri), options)];
                    case 1:
                        wrapper = _a.sent();
                        client = contextualizeClient(this, options.contextId);
                        return [4 /*yield*/, wrapper.getFile(options, client)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolywrapClient.prototype.getImplementations = function (uri, options) {
        if (options === void 0) { options = {}; }
        var isUriTypeString = typeof uri === "string";
        var applyRedirects = !!options.applyRedirects;
        return isUriTypeString
            ? core_js_1.getImplementations(this._toUri(uri), this.getInterfaces(options), applyRedirects ? this.getRedirects(options) : undefined).map(function (x) { return x.uri; })
            : core_js_1.getImplementations(this._toUri(uri), this.getInterfaces(options), applyRedirects ? this.getRedirects(options) : undefined);
    };
    PolywrapClient.prototype.query = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, contextId, shouldClearContext, result, typedOptions, uri, query, variables, queryDocument, queryInvocations, parallelInvocations, _loop_1, this_1, _b, _c, invocationName, invocationResults, data, errors, invocationResults_1, invocationResults_1_1, invocation, error_1;
            var e_1, _d, e_2, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = this._setContext(options.contextId, options.config), contextId = _a.contextId, shouldClearContext = _a.shouldClearContext;
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        typedOptions = __assign(__assign({}, options), { uri: this._toUri(options.uri) });
                        uri = typedOptions.uri, query = typedOptions.query, variables = typedOptions.variables;
                        queryDocument = typeof query === "string" ? core_js_1.createQueryDocument(query) : query;
                        queryInvocations = core_js_1.parseQuery(uri, queryDocument, variables);
                        parallelInvocations = [];
                        _loop_1 = function (invocationName) {
                            parallelInvocations.push(this_1.invoke(__assign(__assign({}, queryInvocations[invocationName]), { uri: queryInvocations[invocationName].uri, contextId: contextId })).then(function (result) { return ({
                                name: invocationName,
                                result: result,
                            }); }));
                        };
                        this_1 = this;
                        try {
                            for (_b = __values(Object.keys(queryInvocations)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                invocationName = _c.value;
                                _loop_1(invocationName);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [4 /*yield*/, Promise.all(parallelInvocations)];
                    case 2:
                        invocationResults = _f.sent();
                        tracing_js_1.Tracer.addEvent("invocationResults", invocationResults);
                        data = {};
                        errors = [];
                        try {
                            for (invocationResults_1 = __values(invocationResults), invocationResults_1_1 = invocationResults_1.next(); !invocationResults_1_1.done; invocationResults_1_1 = invocationResults_1.next()) {
                                invocation = invocationResults_1_1.value;
                                data[invocation.name] = invocation.result.data;
                                if (invocation.result.error) {
                                    errors.push(invocation.result.error);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (invocationResults_1_1 && !invocationResults_1_1.done && (_e = invocationResults_1.return)) _e.call(invocationResults_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        result = {
                            data: data,
                            errors: errors.length === 0 ? undefined : errors,
                        };
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _f.sent();
                        if (Array.isArray(error_1)) {
                            result = { errors: error_1 };
                        }
                        else {
                            result = { errors: [error_1] };
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        if (shouldClearContext) {
                            this._clearContext(contextId);
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    PolywrapClient.prototype.invoke = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, contextId, shouldClearContext, error, typedOptions, wrapper, invocableResult, e_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._setContext(options.contextId, options.config), contextId = _a.contextId, shouldClearContext = _a.shouldClearContext;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        typedOptions = __assign(__assign({}, options), { contextId: contextId, uri: this._toUri(options.uri) });
                        return [4 /*yield*/, this._loadWrapper(typedOptions.uri, { contextId: contextId })];
                    case 2:
                        wrapper = _b.sent();
                        return [4 /*yield*/, wrapper.invoke(typedOptions, contextualizeClient(this, contextId))];
                    case 3:
                        invocableResult = _b.sent();
                        if (invocableResult.data !== undefined) {
                            if (options.encodeResult && !invocableResult.encoded) {
                                return [2 /*return*/, {
                                        // TODO: if options.encodeResult, fix return type to Uint8Array
                                        data: msgpack_js_1.msgpackEncode(invocableResult.data),
                                    }];
                            }
                            else if (invocableResult.encoded && !options.encodeResult) {
                                return [2 /*return*/, {
                                        // TODO: if result.encoded, fix return type to Uint8Array
                                        data: msgpack_js_1.msgpackDecode(invocableResult.data),
                                    }];
                            }
                            else {
                                return [2 /*return*/, {
                                        data: invocableResult.data,
                                    }];
                            }
                        }
                        else {
                            error = invocableResult.error;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _b.sent();
                        error = e_3;
                        return [3 /*break*/, 5];
                    case 5:
                        if (shouldClearContext) {
                            this._clearContext(contextId);
                        }
                        return [2 /*return*/, { error: error }];
                }
            });
        });
    };
    PolywrapClient.prototype.run = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow, onExecution, ids, jobRunner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        workflow = options.workflow, onExecution = options.onExecution;
                        ids = options.ids ? options.ids : Object.keys(workflow.jobs);
                        jobRunner = new core_js_1.JobRunner(this, onExecution);
                        return [4 /*yield*/, Promise.all(ids.map(function (id) {
                                return jobRunner.run({ relativeId: id, parentId: "", jobs: workflow.jobs });
                            }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PolywrapClient.prototype.subscribe = function (options) {
        var _a;
        var _b, _c, _d, _e;
        var _f = this._setContext(options.contextId, options.config), contextId = _f.contextId, shouldClearContext = _f.shouldClearContext;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var thisClient = this;
        var client = contextualizeClient(this, contextId);
        var typedOptions = __assign(__assign({}, options), { uri: this._toUri(options.uri) });
        var uri = typedOptions.uri, method = typedOptions.method, args = typedOptions.args, config = typedOptions.config, freq = typedOptions.frequency;
        // calculate interval between invokes, in milliseconds, 1 min default value
        /* eslint-disable prettier/prettier */
        var frequency;
        if (freq && (freq.ms || freq.sec || freq.min || freq.hours)) {
            frequency =
                ((_b = freq.ms) !== null && _b !== void 0 ? _b : 0) +
                    (((_c = freq.hours) !== null && _c !== void 0 ? _c : 0) * 3600 + ((_d = freq.min) !== null && _d !== void 0 ? _d : 0) * 60 + ((_e = freq.sec) !== null && _e !== void 0 ? _e : 0)) *
                        1000;
        }
        else {
            frequency = 60000;
        }
        /* eslint-enable  prettier/prettier */
        var subscription = (_a = {
                frequency: frequency,
                isActive: false,
                stop: function () {
                    if (shouldClearContext) {
                        thisClient._clearContext(contextId);
                    }
                    subscription.isActive = false;
                }
            },
            _a[Symbol.asyncIterator] = function () {
                return __asyncGenerator(this, arguments, function _a() {
                    var timeout, readyVals_1, sleep_1, result;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                timeout = undefined;
                                subscription.isActive = true;
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, , 11, 12]);
                                readyVals_1 = 0;
                                timeout = setInterval(function () {
                                    readyVals_1++;
                                    if (sleep_1) {
                                        sleep_1();
                                        sleep_1 = undefined;
                                    }
                                }, frequency);
                                _b.label = 2;
                            case 2:
                                if (!subscription.isActive) return [3 /*break*/, 10];
                                if (!(readyVals_1 === 0)) return [3 /*break*/, 4];
                                return [4 /*yield*/, __await(new Promise(function (r) { return (sleep_1 = r); }))];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                if (!(readyVals_1 > 0)) return [3 /*break*/, 9];
                                if (!subscription.isActive) {
                                    return [3 /*break*/, 9];
                                }
                                return [4 /*yield*/, __await(client.invoke({
                                        uri: uri,
                                        method: method,
                                        args: args,
                                        config: config,
                                        contextId: contextId,
                                    }))];
                            case 5:
                                result = _b.sent();
                                return [4 /*yield*/, __await(result)];
                            case 6: return [4 /*yield*/, _b.sent()];
                            case 7:
                                _b.sent();
                                _b.label = 8;
                            case 8:
                                readyVals_1--;
                                return [3 /*break*/, 4];
                            case 9: return [3 /*break*/, 2];
                            case 10: return [3 /*break*/, 12];
                            case 11:
                                if (timeout) {
                                    clearInterval(timeout);
                                }
                                if (shouldClearContext) {
                                    thisClient._clearContext(contextId);
                                }
                                subscription.isActive = false;
                                return [7 /*endfinally*/];
                            case 12: return [2 /*return*/];
                        }
                    });
                });
            },
            _a);
        return subscription;
    };
    PolywrapClient.prototype.resolveUri = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, contextId, shouldClearContext, ignoreCache, cacheWrite, cacheRead, client, uriResolvers, _b, wrapper, resolvedUri, uriHistory, error, _c, _d, item;
            var e_4, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        options = options || {};
                        _a = this._setContext(options.contextId, options.config), contextId = _a.contextId, shouldClearContext = _a.shouldClearContext;
                        ignoreCache = this._isContextualized(contextId);
                        cacheWrite = !ignoreCache && !(options === null || options === void 0 ? void 0 : options.noCacheWrite);
                        cacheRead = !ignoreCache && !(options === null || options === void 0 ? void 0 : options.noCacheRead);
                        client = contextualizeClient(this, contextId);
                        uriResolvers = this.getUriResolvers({ contextId: contextId });
                        if (!cacheRead) {
                            uriResolvers = uriResolvers.filter(function (x) { return x.name !== core_js_1.CacheResolver.name; });
                        }
                        return [4 /*yield*/, core_js_1.resolveUri(this._toUri(uri), uriResolvers, client, this._wrapperCache)];
                    case 1:
                        _b = _f.sent(), wrapper = _b.wrapper, resolvedUri = _b.uri, uriHistory = _b.uriHistory, error = _b.error;
                        // Update cache for all URIs in the chain
                        if (cacheWrite && wrapper) {
                            try {
                                for (_c = __values(uriHistory.getResolutionPath().stack), _d = _c.next(); !_d.done; _d = _c.next()) {
                                    item = _d.value;
                                    this._wrapperCache.set(item.sourceUri.uri, wrapper);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        }
                        if (shouldClearContext) {
                            this._clearContext(contextId);
                        }
                        return [2 /*return*/, {
                                wrapper: wrapper,
                                uri: resolvedUri,
                                uriHistory: uriHistory,
                                error: error,
                            }];
                }
            });
        });
    };
    PolywrapClient.prototype.loadUriResolvers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var extendableUriResolver, uriResolverImpls;
            return __generator(this, function (_a) {
                extendableUriResolver = this.getUriResolvers().find(function (x) { return x.name === core_js_1.ExtendableUriResolver.name; });
                if (!extendableUriResolver) {
                    return [2 /*return*/, {
                            success: true,
                            failedUriResolvers: [],
                        }];
                }
                uriResolverImpls = core_js_1.getImplementations(core_js_1.coreInterfaceUris.uriResolver, this.getInterfaces(), this.getRedirects());
                return [2 /*return*/, extendableUriResolver.loadUriResolverWrappers(this, this._wrapperCache, uriResolverImpls)];
            });
        });
    };
    PolywrapClient.prototype._addDefaultConfig = function () {
        var _a, _b, _c, _d;
        var defaultClientConfig = default_client_config_1.getDefaultClientConfig();
        if (defaultClientConfig.redirects) {
            (_a = this._config.redirects).push.apply(_a, __spread(defaultClientConfig.redirects));
        }
        if (defaultClientConfig.plugins) {
            (_b = this._config.plugins).push.apply(_b, __spread(defaultClientConfig.plugins));
        }
        if (defaultClientConfig.interfaces) {
            (_c = this._config.interfaces).push.apply(_c, __spread(defaultClientConfig.interfaces));
        }
        if (defaultClientConfig.uriResolvers) {
            (_d = this._config.uriResolvers).push.apply(_d, __spread(defaultClientConfig.uriResolvers));
        }
    };
    PolywrapClient.prototype._isContextualized = function (contextId) {
        return !!contextId && this._contexts.has(contextId);
    };
    PolywrapClient.prototype._getConfig = function (contextId) {
        if (contextId) {
            var context = this._contexts.get(contextId);
            if (!context) {
                throw new Error("No invoke context found with id: " + contextId);
            }
            return context;
        }
        else {
            return this._config;
        }
    };
    PolywrapClient.prototype._sanitizeConfig = function () {
        this._sanitizePlugins();
        this._sanitizeInterfacesAndImplementations();
    };
    // Make sure plugin URIs are unique
    // If not, use the first occurrence of the plugin
    PolywrapClient.prototype._sanitizePlugins = function () {
        var e_5, _a, e_6, _b;
        var plugins = this._config.plugins;
        // Plugin map used to keep track of plugins with same URI
        var addedPluginsMap = new Map();
        try {
            for (var plugins_1 = __values(plugins), plugins_1_1 = plugins_1.next(); !plugins_1_1.done; plugins_1_1 = plugins_1.next()) {
                var plugin = plugins_1_1.value;
                var pluginUri = plugin.uri.uri;
                if (!addedPluginsMap.has(pluginUri)) {
                    // If the plugin is not added yet then add it
                    addedPluginsMap.set(pluginUri, plugin.plugin);
                }
                // If the plugin with the same URI is already added, then ignore it
                // This means that if the developer defines a plugin with the same URI as a default plugin
                // we will ignore the default one and use the developer's plugin
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (plugins_1_1 && !plugins_1_1.done && (_a = plugins_1.return)) _a.call(plugins_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        // Collection of unique plugins
        var sanitizedPlugins = [];
        try {
            // Go through the unique map of plugins and add them to the sanitized plugins
            for (var addedPluginsMap_1 = __values(addedPluginsMap), addedPluginsMap_1_1 = addedPluginsMap_1.next(); !addedPluginsMap_1_1.done; addedPluginsMap_1_1 = addedPluginsMap_1.next()) {
                var _c = __read(addedPluginsMap_1_1.value, 2), uri = _c[0], plugin = _c[1];
                sanitizedPlugins.push({
                    uri: new core_js_1.Uri(uri),
                    plugin: plugin,
                });
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (addedPluginsMap_1_1 && !addedPluginsMap_1_1.done && (_b = addedPluginsMap_1.return)) _b.call(addedPluginsMap_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        this._config.plugins = sanitizedPlugins;
    };
    // Make sure interface URIs are unique and that all of their implementation URIs are unique
    // If not, then merge them
    PolywrapClient.prototype._sanitizeInterfacesAndImplementations = function () {
        var e_7, _a, e_8, _b;
        var interfaces = this._config.interfaces;
        // Interface hash map used to keep track of interfaces with same URI
        // A set is used to keep track of unique implementation URIs
        var addedInterfacesHashMap = new Map();
        try {
            for (var interfaces_1 = __values(interfaces), interfaces_1_1 = interfaces_1.next(); !interfaces_1_1.done; interfaces_1_1 = interfaces_1.next()) {
                var interfaceImplementations = interfaces_1_1.value;
                var interfaceUri = interfaceImplementations.interface.uri;
                if (!addedInterfacesHashMap.has(interfaceUri)) {
                    // If the interface is not added yet then just add it along with its implementations
                    addedInterfacesHashMap.set(interfaceUri, new Set(interfaceImplementations.implementations.map(function (x) { return x.uri; })));
                }
                else {
                    var existingInterfaceImplementations = addedInterfacesHashMap.get(interfaceUri);
                    // Get implementations to add to existing set of implementations
                    var newImplementationUris = interfaceImplementations.implementations.map(function (x) { return x.uri; });
                    // Add new implementations to existing set
                    newImplementationUris.forEach(existingInterfaceImplementations.add, existingInterfaceImplementations);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (interfaces_1_1 && !interfaces_1_1.done && (_a = interfaces_1.return)) _a.call(interfaces_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        // Collection of unique interfaces with implementations merged
        var sanitizedInterfaces = [];
        try {
            // Go through the unique hash map of interfaces and implementations and add them to the sanitized interfaces
            for (var _c = __values(addedInterfacesHashMap.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), interfaceUri = _e[0], implementationSet = _e[1];
                sanitizedInterfaces.push({
                    interface: new core_js_1.Uri(interfaceUri),
                    implementations: __spread(implementationSet).map(function (x) { return new core_js_1.Uri(x); }),
                });
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_8) throw e_8.error; }
        }
        this._config.interfaces = sanitizedInterfaces;
    };
    PolywrapClient.prototype._validateConfig = function () {
        // Require plugins to use non-interface URIs
        var pluginUris = this.getPlugins().map(function (x) { return x.uri.uri; });
        var interfaceUris = this.getInterfaces().map(function (x) { return x.interface.uri; });
        var pluginsWithInterfaceUris = pluginUris.filter(function (plugin) {
            return interfaceUris.includes(plugin);
        });
        if (pluginsWithInterfaceUris.length) {
            throw Error("Plugins can't use interfaces for their URI. Invalid plugins: " + pluginsWithInterfaceUris);
        }
    };
    PolywrapClient.prototype._toUri = function (uri) {
        if (typeof uri === "string") {
            return new core_js_1.Uri(uri);
        }
        else if (core_js_1.Uri.isUri(uri)) {
            return uri;
        }
        else {
            throw Error("Unknown uri type, cannot convert. " + JSON.stringify(uri));
        }
    };
    /**
     * Sets invoke context:
     *  1. !parentId && !context  -> do nothing
     *  2. parentId && !context   -> do nothing, use parent context ID
     *  3. !parentId && context   -> create context ID, default config as "base", cache context
     *  4. parentId && context    -> create context ID, parent config as "base", cache context
     */
    PolywrapClient.prototype._setContext = function (parentId, context) {
        var _a;
        if (!context) {
            return {
                contextId: parentId,
                shouldClearContext: false,
            };
        }
        var config = this._getConfig(parentId);
        var id = uuid_1.v4();
        this._contexts.set(id, {
            redirects: (context === null || context === void 0 ? void 0 : context.redirects) ? core_js_1.sanitizeUriRedirects(context.redirects)
                : config.redirects,
            plugins: (context === null || context === void 0 ? void 0 : context.plugins) ? core_js_1.sanitizePluginRegistrations(context.plugins)
                : config.plugins,
            interfaces: (context === null || context === void 0 ? void 0 : context.interfaces) ? core_js_1.sanitizeInterfaceImplementations(context.interfaces)
                : config.interfaces,
            envs: (context === null || context === void 0 ? void 0 : context.envs) ? core_js_1.sanitizeEnvs(context.envs) : config.envs,
            uriResolvers: (_a = context === null || context === void 0 ? void 0 : context.uriResolvers) !== null && _a !== void 0 ? _a : config.uriResolvers,
            tracingEnabled: (context === null || context === void 0 ? void 0 : context.tracingEnabled) || config.tracingEnabled,
        });
        return {
            contextId: id,
            shouldClearContext: true,
        };
    };
    PolywrapClient.prototype._clearContext = function (contextId) {
        if (contextId) {
            this._contexts.delete(contextId);
        }
    };
    PolywrapClient.prototype._loadWrapper = function (uri, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var _c, wrapper, uriHistory, error, errorMessage;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.resolveUri(uri, {
                            contextId: options === null || options === void 0 ? void 0 : options.contextId,
                        })];
                    case 1:
                        _c = _d.sent(), wrapper = _c.wrapper, uriHistory = _c.uriHistory, error = _c.error;
                        if (!wrapper) {
                            if (error) {
                                errorMessage = (_b = (_a = error.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : "";
                                switch (error.type) {
                                    case core_js_1.ResolveUriErrorType.InfiniteLoop:
                                        throw Error("Infinite loop while resolving URI \"" + uri + "\".\nResolution Stack: " + JSON.stringify(uriHistory, null, 2));
                                        break;
                                    case core_js_1.ResolveUriErrorType.InternalResolver:
                                        throw Error("URI resolution error while resolving URI \"" + uri + "\".\n" + errorMessage + "\nResolution Stack: " + JSON.stringify(uriHistory, null, 2));
                                        break;
                                    default:
                                        throw Error("Unsupported URI resolution error type occurred");
                                        break;
                                }
                            }
                            else {
                                throw Error("Unknown URI resolution error while resolving URI \"" + uri + "\"\nResolution Stack: " + JSON.stringify(uriHistory, null, 2));
                            }
                        }
                        return [2 /*return*/, wrapper];
                }
            });
        });
    };
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getRedirects")
    ], PolywrapClient.prototype, "getRedirects", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getPlugins")
    ], PolywrapClient.prototype, "getPlugins", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getInterfaces")
    ], PolywrapClient.prototype, "getInterfaces", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getEnvs")
    ], PolywrapClient.prototype, "getEnvs", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getUriResolvers")
    ], PolywrapClient.prototype, "getUriResolvers", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getEnvByUri")
    ], PolywrapClient.prototype, "getEnvByUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getSchema")
    ], PolywrapClient.prototype, "getSchema", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getManifest")
    ], PolywrapClient.prototype, "getManifest", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getFile")
    ], PolywrapClient.prototype, "getFile", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getImplementations")
    ], PolywrapClient.prototype, "getImplementations", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: query")
    ], PolywrapClient.prototype, "query", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: invoke")
    ], PolywrapClient.prototype, "invoke", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: run")
    ], PolywrapClient.prototype, "run", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: subscribe")
    ], PolywrapClient.prototype, "subscribe", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: resolveUri")
    ], PolywrapClient.prototype, "resolveUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: loadUriResolverWrappers")
    ], PolywrapClient.prototype, "loadUriResolvers", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: isContextualized")
    ], PolywrapClient.prototype, "_isContextualized", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getConfig")
    ], PolywrapClient.prototype, "_getConfig", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: sanitizeConfig")
    ], PolywrapClient.prototype, "_sanitizeConfig", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: sanitizePlugins")
    ], PolywrapClient.prototype, "_sanitizePlugins", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: sanitizeInterfacesAndImplementations")
    ], PolywrapClient.prototype, "_sanitizeInterfacesAndImplementations", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: validateConfig")
    ], PolywrapClient.prototype, "_validateConfig", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: toUri")
    ], PolywrapClient.prototype, "_toUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: setContext")
    ], PolywrapClient.prototype, "_setContext", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: clearContext")
    ], PolywrapClient.prototype, "_clearContext", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: _loadWrapper")
    ], PolywrapClient.prototype, "_loadWrapper", null);
    return PolywrapClient;
}());
exports.PolywrapClient = PolywrapClient;
var contextualizeClient = function (client, contextId) {
    return contextId
        ? {
            query: function (options) {
                return client.query(__assign(__assign({}, options), { contextId: contextId }));
            },
            invoke: function (options) {
                return client.invoke(__assign(__assign({}, options), { contextId: contextId }));
            },
            subscribe: function (options) {
                return client.subscribe(__assign(__assign({}, options), { contextId: contextId }));
            },
            getRedirects: function (options) {
                if (options === void 0) { options = {}; }
                return client.getRedirects(__assign(__assign({}, options), { contextId: contextId }));
            },
            getPlugins: function (options) {
                if (options === void 0) { options = {}; }
                return client.getPlugins(__assign(__assign({}, options), { contextId: contextId }));
            },
            getInterfaces: function (options) {
                if (options === void 0) { options = {}; }
                return client.getInterfaces(__assign(__assign({}, options), { contextId: contextId }));
            },
            getEnvs: function (options) {
                if (options === void 0) { options = {}; }
                return client.getEnvs(__assign(__assign({}, options), { contextId: contextId }));
            },
            getUriResolvers: function (options) {
                if (options === void 0) { options = {}; }
                return client.getUriResolvers(__assign(__assign({}, options), { contextId: contextId }));
            },
            getEnvByUri: function (uri, options) {
                if (options === void 0) { options = {}; }
                return client.getEnvByUri(uri, __assign(__assign({}, options), { contextId: contextId }));
            },
            getFile: function (uri, options) {
                return client.getFile(uri, options);
            },
            getSchema: function (uri, options) {
                if (options === void 0) { options = {}; }
                return client.getSchema(uri, __assign(__assign({}, options), { contextId: contextId }));
            },
            getManifest: function (uri, options) {
                return client.getManifest(uri, options);
            },
            getImplementations: function (uri, options) {
                if (options === void 0) { options = {}; }
                return client.getImplementations(uri, __assign(__assign({}, options), { contextId: contextId }));
            },
            resolveUri: function (uri, options) {
                return client.resolveUri(uri, __assign(__assign({}, options), { contextId: contextId }));
            },
            loadUriResolvers: function () {
                return client.loadUriResolvers();
            },
            run: function (options) {
                return client.run(__assign(__assign({}, options), { contextId: contextId }));
            },
        }
        : client;
};
//# sourceMappingURL=PolywrapClient.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobRunner = void 0;
var types_1 = require("../types");
var JobRunner = /** @class */ (function () {
    function JobRunner(client, onExecution) {
        this.client = client;
        this.onExecution = onExecution;
        this.jobOutput = new Map();
    }
    JobRunner.prototype.run = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var relativeId, parentId, jobs, index, jobId, steps, i, result, args, step, absoluteId, invokeResult, subJobs, jobIds;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        relativeId = opts.relativeId, parentId = opts.parentId, jobs = opts.jobs;
                        if (!relativeId) return [3 /*break*/, 9];
                        index = relativeId.indexOf(".");
                        index = index === -1 ? relativeId.length : index;
                        jobId = relativeId.substring(0, index);
                        if (jobId === "")
                            return [2 /*return*/];
                        steps = jobs[jobId].steps;
                        if (!steps) return [3 /*break*/, 6];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < steps.length)) return [3 /*break*/, 6];
                        result = void 0;
                        args = void 0;
                        step = steps[i];
                        absoluteId = parentId
                            ? parentId + "." + jobId + "." + i
                            : jobId + "." + i;
                        try {
                            args = this.resolveArgs(absoluteId, step.args);
                        }
                        catch (e) {
                            result = {
                                error: e,
                                status: types_1.JobStatus.SKIPPED,
                            };
                        }
                        if (!args) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.client.invoke({
                                uri: step.uri,
                                method: step.method,
                                config: step.config,
                                args: args,
                            })];
                    case 2:
                        invokeResult = _a.sent();
                        if (invokeResult.error) {
                            result = __assign(__assign({}, invokeResult), { status: types_1.JobStatus.FAILED });
                        }
                        else {
                            result = __assign(__assign({}, invokeResult), { status: types_1.JobStatus.SUCCEED });
                        }
                        _a.label = 3;
                    case 3:
                        if (!result) return [3 /*break*/, 5];
                        this.jobOutput.set(absoluteId, result);
                        if (!(this.onExecution && typeof this.onExecution === "function")) return [3 /*break*/, 5];
                        return [4 /*yield*/, types_1.executeMaybeAsyncFunction(this.onExecution, absoluteId, result)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6:
                        subJobs = jobs[jobId].jobs;
                        if (!subJobs) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.run({
                                relativeId: relativeId.substring(index + 1),
                                parentId: parentId ? parentId + "." + jobId : jobId,
                                jobs: subJobs,
                            })];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        jobIds = Object.keys(jobs);
                        // Run all the sibling jobs in parallel
                        return [4 /*yield*/, Promise.all(jobIds.map(function (jobId) {
                                return _this.run({
                                    relativeId: jobId,
                                    parentId: parentId,
                                    jobs: jobs,
                                });
                            }))];
                    case 10:
                        // Run all the sibling jobs in parallel
                        _a.sent();
                        _a.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    JobRunner.prototype.resolveArgs = function (absCurStepId, args) {
        var index = absCurStepId.lastIndexOf(".");
        var curStepId = +absCurStepId.substring(index + 1);
        var absCurJobId = absCurStepId.substring(0, index);
        var outputs = this.jobOutput;
        function resolveValue(value) {
            if (typeof value === "string" && value.startsWith("$")) {
                var absStepIdArr = value.slice(1).split(".");
                var absJobId = absStepIdArr
                    .slice(0, absStepIdArr.length - 2)
                    .join(".");
                var dataOrErr = absStepIdArr[absStepIdArr.length - 1];
                var absStepId = absJobId + "." + absStepIdArr[absStepIdArr.length - 2];
                if (absCurJobId.includes(absJobId)) {
                    if (absJobId === absCurJobId) {
                        if (+absStepIdArr[absStepIdArr.length - 2] < curStepId) {
                            var output_1 = outputs.get(absStepId);
                            if (output_1 && output_1[dataOrErr]) {
                                return output_1[dataOrErr];
                            }
                        }
                    }
                    var output = outputs.get(absStepId);
                    if (output &&
                        dataOrErr === "data" &&
                        output.status === types_1.JobStatus.SUCCEED &&
                        output.data) {
                        return output.data;
                    }
                    if (output &&
                        dataOrErr === "error" &&
                        output.status === types_1.JobStatus.FAILED &&
                        output.error) {
                        return output.error;
                    }
                }
                throw new Error("Could not resolve arguments for step with stepId: " + absCurJobId + "." + curStepId);
            }
            else if (Array.isArray(value))
                return value.map(resolveValue);
            else if (typeof value === "object" && value !== null) {
                return Object.entries(value).reduce(function (obj, _a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return ((obj[k] = resolveValue(v)), obj);
                }, {});
            }
            else
                return value;
        }
        return resolveValue(args);
    };
    return JobRunner;
}());
exports.JobRunner = JobRunner;
//# sourceMappingURL=JobRunner.js.map
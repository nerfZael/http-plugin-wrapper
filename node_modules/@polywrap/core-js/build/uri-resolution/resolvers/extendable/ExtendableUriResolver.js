"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendableUriResolver = void 0;
var __1 = require("../../..");
var UriResolverWrapper_1 = require("./UriResolverWrapper");
var Queue_1 = require("../../../utils/Queue");
var ExtendableUriResolver = /** @class */ (function () {
    function ExtendableUriResolver(_createWrapper, _deserializeOptions, disablePreload) {
        this._createWrapper = _createWrapper;
        this._deserializeOptions = _deserializeOptions;
        if (disablePreload) {
            this._hasLoadedUriResolvers = true;
        }
    }
    Object.defineProperty(ExtendableUriResolver.prototype, "name", {
        get: function () {
            return ExtendableUriResolver.name;
        },
        enumerable: false,
        configurable: true
    });
    ExtendableUriResolver.prototype.resolveUri = function (uri, client, cache, resolutionPath) {
        return __awaiter(this, void 0, void 0, function () {
            var uriResolverImpls, _a, success, failedUriResolvers, resolvers, resolvers_1, resolvers_1_1, resolver, result, e_1_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        uriResolverImpls = __1.getImplementations(__1.coreInterfaceUris.uriResolver, client.getInterfaces({}), client.getRedirects({}));
                        if (!!this._hasLoadedUriResolvers) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadUriResolverWrappers(client, cache, uriResolverImpls)];
                    case 1:
                        _a = _c.sent(), success = _a.success, failedUriResolvers = _a.failedUriResolvers;
                        if (!success) {
                            return [2 /*return*/, {
                                    uri: uri,
                                    error: new Error("Could not load the following URI Resolver implementations: " + failedUriResolvers),
                                }];
                        }
                        this._hasLoadedUriResolvers = true;
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this._createUriResolverWrappers(uriResolverImpls)];
                    case 3:
                        resolvers = _c.sent();
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 9, 10, 11]);
                        resolvers_1 = __values(resolvers), resolvers_1_1 = resolvers_1.next();
                        _c.label = 5;
                    case 5:
                        if (!!resolvers_1_1.done) return [3 /*break*/, 8];
                        resolver = resolvers_1_1.value;
                        return [4 /*yield*/, resolver.resolveUri(uri, client, cache, resolutionPath)];
                    case 6:
                        result = _c.sent();
                        if (result.wrapper || (result.uri && uri.uri !== result.uri.uri)) {
                            return [2 /*return*/, {
                                    uri: result.uri,
                                    wrapper: result.wrapper,
                                    implementationUri: resolver.implementationUri,
                                }];
                        }
                        _c.label = 7;
                    case 7:
                        resolvers_1_1 = resolvers_1.next();
                        return [3 /*break*/, 5];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (resolvers_1_1 && !resolvers_1_1.done && (_b = resolvers_1.return)) _b.call(resolvers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/, {
                            uri: uri,
                        }];
                }
            });
        });
    };
    ExtendableUriResolver.prototype.loadUriResolverWrappers = function (client, cache, implementationUris) {
        return __awaiter(this, void 0, void 0, function () {
            var bootstrapUriResolvers, implementationsToLoad, implementationUris_1, implementationUris_1_1, implementationUri_1, implementationUri, failedAttempts, wrapper;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        bootstrapUriResolvers = client
                            .getUriResolvers({})
                            .filter(function (x) { return x.name !== ExtendableUriResolver.name; });
                        implementationsToLoad = new Queue_1.Queue();
                        try {
                            for (implementationUris_1 = __values(implementationUris), implementationUris_1_1 = implementationUris_1.next(); !implementationUris_1_1.done; implementationUris_1_1 = implementationUris_1.next()) {
                                implementationUri_1 = implementationUris_1_1.value;
                                if (!cache.has(implementationUri_1.uri)) {
                                    implementationsToLoad.enqueue(implementationUri_1);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (implementationUris_1_1 && !implementationUris_1_1.done && (_a = implementationUris_1.return)) _a.call(implementationUris_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        failedAttempts = 0;
                        _b.label = 1;
                    case 1:
                        if (!(implementationUri = implementationsToLoad.dequeue())) return [3 /*break*/, 3];
                        return [4 /*yield*/, client.resolveUri(implementationUri, {
                                config: {
                                    uriResolvers: bootstrapUriResolvers,
                                },
                            })];
                    case 2:
                        wrapper = (_b.sent()).wrapper;
                        if (!wrapper) {
                            // If not successful, add the resolver to the end of the queue
                            implementationsToLoad.enqueue(implementationUri);
                            failedAttempts++;
                            if (failedAttempts === implementationsToLoad.length) {
                                return [2 /*return*/, {
                                        success: false,
                                        failedUriResolvers: implementationsToLoad
                                            .toArray()
                                            .map(function (x) { return x.uri; }),
                                    }];
                            }
                        }
                        else {
                            // If successful, it is automatically cached during the resolveUri method
                            failedAttempts = 0;
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        this._hasLoadedUriResolvers = true;
                        return [2 /*return*/, {
                                success: true,
                                failedUriResolvers: [],
                            }];
                }
            });
        });
    };
    ExtendableUriResolver.prototype._createUriResolverWrappers = function (implementationUris) {
        return __awaiter(this, void 0, void 0, function () {
            var uriResolverImpls, implementationUris_2, implementationUris_2_1, implementationUri, uriResolverImpl;
            var e_3, _a;
            return __generator(this, function (_b) {
                uriResolverImpls = [];
                try {
                    for (implementationUris_2 = __values(implementationUris), implementationUris_2_1 = implementationUris_2.next(); !implementationUris_2_1.done; implementationUris_2_1 = implementationUris_2.next()) {
                        implementationUri = implementationUris_2_1.value;
                        uriResolverImpl = new UriResolverWrapper_1.UriResolverWrapper(implementationUri, this._createWrapper, this._deserializeOptions);
                        uriResolverImpls.push(uriResolverImpl);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (implementationUris_2_1 && !implementationUris_2_1.done && (_a = implementationUris_2.return)) _a.call(implementationUris_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return [2 /*return*/, uriResolverImpls];
            });
        });
    };
    return ExtendableUriResolver;
}());
exports.ExtendableUriResolver = ExtendableUriResolver;
//# sourceMappingURL=ExtendableUriResolver.js.map
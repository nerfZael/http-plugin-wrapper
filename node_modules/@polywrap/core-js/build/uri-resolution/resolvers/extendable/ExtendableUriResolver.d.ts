import { Uri, Client, WrapperCache } from "../../..";
import { CreateWrapperFunc } from "./types/CreateWrapperFunc";
import { UriResolutionResult } from "../../core/types/UriResolutionResult";
import { UriResolver, UriResolutionStack } from "../../core";
import { DeserializeManifestOptions } from "@polywrap/wrap-manifest-types-js";
export declare type ExtendableUriResolverResult = UriResolutionResult & {
    implementationUri?: Uri;
};
export declare class ExtendableUriResolver implements UriResolver {
    private readonly _createWrapper;
    private _deserializeOptions?;
    private _hasLoadedUriResolvers;
    constructor(_createWrapper: CreateWrapperFunc, _deserializeOptions?: DeserializeManifestOptions | undefined, disablePreload?: boolean);
    get name(): string;
    resolveUri(uri: Uri, client: Client, cache: WrapperCache, resolutionPath: UriResolutionStack): Promise<ExtendableUriResolverResult>;
    loadUriResolverWrappers(client: Client, cache: WrapperCache, implementationUris: Uri[]): Promise<{
        success: boolean;
        failedUriResolvers: string[];
    }>;
    private _createUriResolverWrappers;
}

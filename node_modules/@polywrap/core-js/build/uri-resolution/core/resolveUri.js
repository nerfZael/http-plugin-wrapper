"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveUri = void 0;
var UriResolutionHistory_1 = require("./types/UriResolutionHistory");
var types_1 = require("./types");
var InternalResolverError_1 = require("./types/InternalResolverError");
var tracing_js_1 = require("@polywrap/tracing-js");
exports.resolveUri = function (uri, uriResolvers, client, cache) { return __awaiter(void 0, void 0, void 0, function () {
    var visitedUriMap, uriResolutionStack, currentUri, wrapper, runAgain, infiniteLoopDetected, uriResolvers_1, uriResolvers_1_1, resolver, result, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                visitedUriMap = new Map();
                uriResolutionStack = [];
                currentUri = uri;
                runAgain = true;
                _b.label = 1;
            case 1:
                if (!runAgain) return [3 /*break*/, 10];
                runAgain = false;
                infiniteLoopDetected = trackVisitedUri(currentUri.uri, visitedUriMap).infiniteLoopDetected;
                _b.label = 2;
            case 2:
                _b.trys.push([2, 7, 8, 9]);
                uriResolvers_1 = (e_1 = void 0, __values(uriResolvers)), uriResolvers_1_1 = uriResolvers_1.next();
                _b.label = 3;
            case 3:
                if (!!uriResolvers_1_1.done) return [3 /*break*/, 6];
                resolver = uriResolvers_1_1.value;
                if (infiniteLoopDetected) {
                    return [2 /*return*/, {
                            uri: currentUri,
                            wrapper: wrapper,
                            uriHistory: new UriResolutionHistory_1.UriResolutionHistory(uriResolutionStack),
                            error: {
                                type: types_1.ResolveUriErrorType.InfiniteLoop,
                            },
                        }];
                }
                return [4 /*yield*/, resolver.resolveUri(currentUri, client, cache, new UriResolutionHistory_1.UriResolutionHistory(uriResolutionStack).getResolutionPath().stack)];
            case 4:
                result = _b.sent();
                trackUriHistory(currentUri, resolver, result, uriResolutionStack);
                if (result.wrapper) {
                    wrapper = result.wrapper;
                    tracing_js_1.Tracer.addEvent("uri-resolver-redirect", {
                        from: currentUri.uri,
                        to: "wrapper",
                    });
                    return [3 /*break*/, 6];
                }
                else if (result.uri && result.uri.uri !== currentUri.uri) {
                    tracing_js_1.Tracer.addEvent("uri-resolver-redirect", {
                        from: currentUri.uri,
                        to: result.uri.uri,
                    });
                    currentUri = result.uri;
                    runAgain = true;
                    return [3 /*break*/, 6];
                }
                else if (result.error) {
                    return [2 /*return*/, {
                            uri: currentUri,
                            uriHistory: new UriResolutionHistory_1.UriResolutionHistory(uriResolutionStack),
                            error: new InternalResolverError_1.InternalResolverError(resolver.name, result.error),
                        }];
                }
                _b.label = 5;
            case 5:
                uriResolvers_1_1 = uriResolvers_1.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (uriResolvers_1_1 && !uriResolvers_1_1.done && (_a = uriResolvers_1.return)) _a.call(uriResolvers_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9: return [3 /*break*/, 1];
            case 10: return [2 /*return*/, {
                    uri: currentUri,
                    wrapper: wrapper,
                    uriHistory: new UriResolutionHistory_1.UriResolutionHistory(uriResolutionStack),
                }];
        }
    });
}); };
var trackVisitedUri = function (uri, visitedUriMap) {
    if (visitedUriMap.has(uri)) {
        return {
            infiniteLoopDetected: true,
        };
    }
    visitedUriMap.set(uri, true);
    return {
        infiniteLoopDetected: false,
    };
};
var trackUriHistory = function (sourceUri, resolver, result, uriResolutionStack) {
    uriResolutionStack.push({
        uriResolver: resolver.name,
        sourceUri: sourceUri,
        result: __assign(__assign({}, result), { wrapper: !!result.wrapper }),
    });
};
//# sourceMappingURL=resolveUri.js.map
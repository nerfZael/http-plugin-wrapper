"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSelections = exports.parseQuery = void 0;
var tracing_js_1 = require("@polywrap/tracing-js");
exports.parseQuery = tracing_js_1.Tracer.traceFunc("core: parseQuery", function (uri, doc, variables) {
    var e_1, _a, e_2, _b, e_3, _c;
    if (doc.definitions.length === 0) {
        throw Error("Empty query document found.");
    }
    var queryInvocations = {};
    try {
        for (var _d = __values(doc.definitions), _e = _d.next(); !_e.done; _e = _d.next()) {
            var def = _e.value;
            if (def.kind !== "OperationDefinition") {
                throw Error("Unrecognized root level definition type: " + def.kind + "\n" +
                    "Please use a 'query' or 'mutation' operations.");
            }
            // Get the method name
            var selectionSet = def.selectionSet;
            var selections = selectionSet.selections;
            if (selections.length === 0) {
                throw Error("Empty selection set found. Please include the name of a method you'd like to query.");
            }
            try {
                for (var selections_1 = (e_2 = void 0, __values(selections)), selections_1_1 = selections_1.next(); !selections_1_1.done; selections_1_1 = selections_1.next()) {
                    var selection = selections_1_1.value;
                    if (selection.kind !== "Field") {
                        throw Error("Unsupported selection type found: " + selection.kind + "\n" +
                            "Please query a method.");
                    }
                    var method = selection.name.value;
                    var invocationName = selection.alias ? selection.alias.value : method;
                    if (queryInvocations[invocationName]) {
                        throw Error("Duplicate query name found \"" + invocationName + "\". Please use GraphQL aliases that each have unique names.");
                    }
                    // Get all arguments
                    var selectionArgs = selection.arguments;
                    var args = {};
                    if (selectionArgs) {
                        try {
                            for (var selectionArgs_1 = (e_3 = void 0, __values(selectionArgs)), selectionArgs_1_1 = selectionArgs_1.next(); !selectionArgs_1_1.done; selectionArgs_1_1 = selectionArgs_1.next()) {
                                var arg = selectionArgs_1_1.value;
                                var name_1 = arg.name.value;
                                if (args[name_1]) {
                                    throw Error("Duplicate arguments found: " + name_1);
                                }
                                args[name_1] = extractValue(arg.value, variables);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (selectionArgs_1_1 && !selectionArgs_1_1.done && (_c = selectionArgs_1.return)) _c.call(selectionArgs_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    queryInvocations[invocationName] = {
                        uri: uri,
                        method: method,
                        args: args,
                    };
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (selections_1_1 && !selections_1_1.done && (_b = selections_1.return)) _b.call(selections_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return queryInvocations;
});
var extractValue = tracing_js_1.Tracer.traceFunc("core: extractValue", function (node, variables) {
    if (node.kind === "Variable") {
        // Get the argument's value from the variables object
        if (!variables) {
            throw Error("Variables were not specified, tried to resolve variable from query. Name: " + node.name.value + "\n");
        }
        if (variables[node.name.value] === undefined) {
            throw Error("Missing variable: " + node.name.value);
        }
        return variables[node.name.value];
    }
    else if (node.kind === "StringValue" ||
        node.kind === "EnumValue" ||
        node.kind === "BooleanValue") {
        return node.value;
    }
    else if (node.kind === "IntValue") {
        return Number.parseInt(node.value);
    }
    else if (node.kind === "FloatValue") {
        return Number.parseFloat(node.value);
    }
    else if (node.kind === "NullValue") {
        return null;
    }
    else if (node.kind === "ListValue") {
        var length_1 = node.values.length;
        var list = [];
        for (var i = 0; i < length_1; ++i) {
            list.push(extractValue(node.values[i], variables));
        }
        return list;
    }
    else if (node.kind === "ObjectValue") {
        var length_2 = node.fields.length;
        var object = {};
        for (var i = 0; i < length_2; ++i) {
            var field = node.fields[i];
            object[field.name.value] = extractValue(field.value, variables);
        }
        return object;
    }
    else {
        throw Error("Unsupported value node: " + node);
    }
});
exports.extractSelections = tracing_js_1.Tracer.traceFunc("core: extractSelections", function (node) {
    var e_4, _a;
    var result = {};
    try {
        for (var _b = __values(node.selections), _c = _b.next(); !_c.done; _c = _b.next()) {
            var selection = _c.value;
            if (selection.kind !== "Field") {
                throw Error("Unsupported result selection type found: " + selection.kind);
            }
            var name_2 = selection.name.value;
            if (result[name_2]) {
                throw Error("Duplicate result selections found: " + name_2);
            }
            if (selection.selectionSet) {
                result[name_2] = exports.extractSelections(selection.selectionSet);
            }
            else {
                result[name_2] = true;
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return result;
});
//# sourceMappingURL=parse-query.js.map
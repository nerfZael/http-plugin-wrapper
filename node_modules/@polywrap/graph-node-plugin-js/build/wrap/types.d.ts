import * as Types from "./";
import { Client, InvokeResult } from "@polywrap/core-js";
export declare type UInt = number;
export declare type UInt8 = number;
export declare type UInt16 = number;
export declare type UInt32 = number;
export declare type Int = number;
export declare type Int8 = number;
export declare type Int16 = number;
export declare type Int32 = number;
export declare type Bytes = Uint8Array;
export declare type BigInt = string;
export declare type BigNumber = string;
export declare type Json = string;
export declare type String = string;
export declare type Boolean = boolean;
export interface HTTP_Request {
    headers?: Array<Types.HTTP_Header> | null;
    urlParams?: Array<Types.HTTP_UrlParam> | null;
    responseType: Types.HTTP_ResponseType;
    body?: Types.String | null;
}
export interface HTTP_Header {
    key: Types.String;
    value: Types.String;
}
export interface HTTP_UrlParam {
    key: Types.String;
    value: Types.String;
}
export interface HTTP_Response {
    status: Types.Int;
    statusText: Types.String;
    headers?: Array<Types.HTTP_Header> | null;
    body?: Types.String | null;
}
export declare enum HTTP_ResponseTypeEnum {
    TEXT = 0,
    BINARY = 1
}
export declare type HTTP_ResponseTypeString = "TEXT" | "BINARY";
export declare type HTTP_ResponseType = HTTP_ResponseTypeEnum | HTTP_ResponseTypeString;
interface HTTP_Module_Args_get extends Record<string, unknown> {
    url: Types.String;
    request?: Types.HTTP_Request | null;
}
interface HTTP_Module_Args_post extends Record<string, unknown> {
    url: Types.String;
    request?: Types.HTTP_Request | null;
}
export declare const HTTP_Module: {
    get: (args: HTTP_Module_Args_get, client: Client) => Promise<InvokeResult<Types.HTTP_Response | null>>;
    post: (args: HTTP_Module_Args_post, client: Client) => Promise<InvokeResult<Types.HTTP_Response | null>>;
};
export {};

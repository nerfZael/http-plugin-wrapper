"use strict";
/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializePolywrapManifest = void 0;
var _1 = require(".");
var semver_1 = require("semver");
var js_yaml_1 = __importDefault(require("js-yaml"));
function deserializePolywrapManifest(manifest, options) {
    var anyPolywrapManifest;
    try {
        anyPolywrapManifest = JSON.parse(manifest);
    }
    catch (e) {
        anyPolywrapManifest = js_yaml_1.default.safeLoad(manifest);
    }
    if (!anyPolywrapManifest) {
        throw Error("Unable to parse PolywrapManifest: " + manifest);
    }
    if (!options || !options.noValidate) {
        _1.validatePolywrapManifest(anyPolywrapManifest, options === null || options === void 0 ? void 0 : options.extSchema);
    }
    anyPolywrapManifest.__type = "PolywrapManifest";
    var versionCompare = semver_1.compare(anyPolywrapManifest.format, _1.latestPolywrapManifestFormat);
    if (versionCompare === -1) {
        // Upgrade
        return _1.migratePolywrapManifest(anyPolywrapManifest, _1.latestPolywrapManifestFormat);
    }
    else if (versionCompare === 1) {
        // Downgrade
        throw Error("Cannot downgrade Polywrap version " + anyPolywrapManifest.format + ", please upgrade your PolywrapClient package.");
    }
    else {
        // Latest
        return anyPolywrapManifest;
    }
}
exports.deserializePolywrapManifest = deserializePolywrapManifest;
//# sourceMappingURL=deserialize.js.map